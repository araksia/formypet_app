name: Bootstrap App Store Profile
on:
  workflow_dispatch: {}

jobs:
  bootstrap:
    runs-on: macos-14
    defaults:
      run:
        shell: bash
    env:
      APP_BUNDLE_ID: gr.formypet.app
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"

      - name: Install fastlane
        working-directory: ios/App
        run: |
          set -e
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Start ssh-agent (match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Known hosts & git identity
        run: |
          set -e
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "ci@github.actions"
          git config --global user.name "GitHub Actions"
          git ls-remote "$MATCH_GIT_URL" -h

      # === ΦΤΙΑΧΝΕΙ asc_api_key.json (δέχεται raw PEM ή base64) + OpenSSL check ===
      - name: Build asc_api_key.json (raw PEM or base64) + OpenSSL check
        working-directory: ios/App
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          ASC_KEY_INPUT: ${{ secrets.APP_STORE_CONNECT_API_KEY_PEM }}
        run: |
          set -e
          if [ -z "$ASC_KEY_ID" ] || [ -z "$ASC_ISSUER_ID" ] || [ -z "$ASC_KEY_INPUT" ]; then
            echo "Missing APP_STORE_CONNECT_API_KEY_* secrets"; exit 1; fi

          # Γράψε το secret· αν δεν είναι PEM, κάνε decode (δοκίμασε --decode, -d, -D, αλλιώς Python)
          printf "%s" "$ASC_KEY_INPUT" > key_input.txt
          if grep -q "BEGIN PRIVATE KEY" key_input.txt; then
            mv key_input.txt AuthKey.p8
          else
            (base64 --decode key_input.txt > AuthKey.p8 2>/dev/null) || \
            (base64 -d key_input.txt > AuthKey.p8 2>/dev/null) || \
            (base64 -D key_input.txt > AuthKey.p8 2>/dev/null) || \
            python3 - <<'PY'
import base64,sys
data=open("key_input.txt","rb").read()
open("AuthKey.p8","wb").write(base64.b64decode(data))
PY
          fi

          # OpenSSL: πρέπει να είναι EC prime256v1 (ES256)
          if ! /usr/bin/openssl pkey -in AuthKey.p8 -noout -text > pem.txt 2>/dev/null; then
            echo "Invalid .p8 (cannot read PEM)"; exit 1; fi
          if ! grep -q "ASN1 OID: prime256v1" pem.txt; then
            echo "Wrong key type. Use App Store Connect API .p8 (ES256/prime256v1), not APNs."; exit 1; fi
          echo "✅ ASC key curve OK (prime256v1)"

          # Φτιάξε asc_api_key.json
          python3 - <<'PY'
import json, os, io
kid=os.environ["ASC_KEY_ID"]; iss=os.environ["ASC_ISSUER_ID"]
with io.open("AuthKey.p8","r",encoding="utf-8",errors="ignore") as f:
    pem=f.read()
if not pem.endswith("\n"):
    pem+="\n"
with io.open("asc_api_key.json","w",encoding="utf-8") as out:
    json.dump({"key_id":kid,"issuer_id":iss,"key":pem,"in_house":False}, out)
print("Wrote asc_api_key.json")
PY
          echo "APP_STORE_CONNECT_API_KEY_PATH=$PWD/asc_api_key.json" >> "$GITHUB_ENV"

      - name: Inspect generated API key JSON
        run: |
          set -e
          FILE="${APP_STORE_CONNECT_API_KEY_PATH:?not-set}"
          echo "Using: $FILE"
          python3 - <<PY
import json,sys,os
p=os.environ["APP_STORE_CONNECT_API_KEY_PATH"]
j=json.load(open(p,"r"))
print("key_id:", j.get("key_id"))
print("issuer_id:", j.get("issuer_id"))
print("key first line:", (j.get("key","").splitlines() or [""])[0])
PY

      - name: Create temp keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -e
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain

      - name: Create/Update App Store provisioning profile
        working-directory: ios/App
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          set -e
          bundle exec fastlane run match \
            readonly:false \
            type:appstore \
            api_key_path:$APP_STORE_CONNECT_API_KEY_PATH \
            app_identifier:$APP_BUNDLE_ID \
            team_id:$TEAM_ID \
            git_url:$MATCH_GIT_URL \
            git_branch:$MATCH_GIT_BRANCH \
            clone_branch_directly:true \
            shallow_clone:false \
            keychain_name:build.keychain \
            keychain_password:$KEYCHAIN_PASSWORD
