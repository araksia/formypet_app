name: Bootstrap App Store Profile
on:
  workflow_dispatch: {}

jobs:
  bootstrap:
    runs-on: macos-14
    env:
      APP_BUNDLE_ID: gr.formypet.app
      TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'

      - name: Install fastlane
        working-directory: ios/App
        run: |
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Start ssh-agent (match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Known hosts & git identity
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "ci@github.actions"
          git config --global user.name "GitHub Actions"
          git ls-remote "$MATCH_GIT_URL" -h

      # === ΦΤΙΑΞΕ ΜΟΝΟΣ ΣΟΥ ΤΟ JSON, ΟΧΙ ACTION ===
      - name: Build asc_api_key.json (accepts raw PEM or base64)
        working-directory: ios/App
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          ASC_PEM_OR_B64: ${{ secrets.APP_STORE_CONNECT_API_KEY_PEM }}
        run: |
          set -e
          if [ -z "$ASC_KEY_ID" ] || [ -z "$ASC_ISSUER_ID" ] || [ -z "$ASC_PEM_OR_B64" ]; then
            echo "❌ Missing APP_STORE_CONNECT_API_KEY_ID / _ISSUER_ID / _KEY_PEM"; exit 1; fi

          # Αν το secret είναι raw PEM, έχει header. Αλλιώς, προσπάθησε base64 decode.
          echo "$ASC_PEM_OR_B64" > raw_input.txt
          if grep -q "BEGIN PRIVATE KEY" raw_input.txt; then
            cp raw_input.txt AuthKey.p8
          else
            base64 --decode raw_input.txt > AuthKey.p8 || { echo "❌ Provided key is not PEM and base64 decode failed"; exit 1; }
          fi

          echo "== OpenSSL curve check =="
          if ! /usr/bin/openssl pkey -in AuthKey.p8 -noout -text > pem.txt 2>/dev/null; then
            echo "❌ Invalid PEM for App Store Connect API key (.p8). Recreate the key in App Store Connect (Users & Access → Keys → App Store Connect API)"; exit 1; fi
          CURVE=$(awk -F': ' '/ASN1 OID/ {print $2}' pem.txt | head -n1)
          echo "Curve: ${CURVE:-unknown}"
          if [ "$CURVE" != "prime256v1" ]; then
            echo "❌ Wrong curve ($CURVE). You likely provided a wrong key. You must use the App Store Connect API key (.p8, ES256/prime256v1), not APNs or anything else."; exit 1; fi

          python3 - <<'PY'
import json, os
kid=os.environ["ASC_KEY_ID"]; iss=os.environ["ASC_ISSUER_ID"]
pem=open("AuthKey.p8","r",encoding="utf-8",errors="ignore").read()
if not pem.endswith("\n"): pem+="\n"
with open("asc_api_key.json","w",encoding="utf-8") as f:
    json.dump({"key_id":kid,"issuer_id":iss,"key":pem,"in_house":False}, f)
print("Wrote asc_api_key.json")
PY
          echo "APP_STORE_CONNECT_API_KEY_PATH=$PWD/asc_api_key.json" >> $GITHUB_ENV

      - name: Create temp keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain

      - name: Create/Update App Store provisioning profile (Push enabled)
        working-directory: ios/App
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          bundle exec fastlane run match \
            readonly:false \
            type:appstore \
            api_key_path:$APP_STORE_CONNECT_API_KEY_PATH \
            app_identifier:$APP_BUNDLE_ID \
            team_id:$TEAM_ID \
            git_url:$MATCH_GIT_URL \
            git_branch:$MATCH_GIT_BRANCH \
            clone_branch_directly:true \
            shallow_clone:false \
            keychain_name:build.keychain \
            keychain_password:$KEYCHAIN_PASSWORD
