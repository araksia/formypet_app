name: Build and Release iOS App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-release:
    name: Build and Release iOS
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - run: npm ci

      - name: Build Web Assets
        run: npm run build

      # ---------- Ruby / Bundler ----------
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
          working-directory: ios/App

      - name: Prepare Bundler (add platform & install)
        working-directory: ios/App
        run: |
          bundle lock --add-platform arm64-darwin-23 || true
          bundle lock --add-platform x86_64-darwin-23 || true
          bundle lock --add-platform x86_64-linux || true
          gem install bundler -v "$(ruby -e 'puts Bundler::LOCKFILE_VERSION rescue nil')"
          bundle install

      # ---------- Capacitor sync (skip pods) ----------
      - name: Sync Capacitor iOS Project (skip pods)
        run: CAPACITOR_SKIP_POD_INSTALL=1 npx cap sync ios

      # ---------- Fix iOS deployment target for Xcode 15.x (≤ 17.2/17.5) ----------
      - name: Force iOS Deployment Target for runner SDK
        run: |
          # Set project to 17.0
          sed -i '' -E 's/IPHONEOS_DEPLOYMENT_TARGET = [0-9.]+;/IPHONEOS_DEPLOYMENT_TARGET = 17.0;/g' ios/App/App.xcodeproj/project.pbxproj
          # Ensure Podfile declares a safe platform for Firebase
          if grep -q "^platform :ios" ios/App/Podfile; then
            sed -i '' -E "s/^platform :ios.*/platform :ios, '13.0'/" ios/App/Podfile
          else
            printf "\nplatform :ios, '13.0'\n" >> ios/App/Podfile
          fi

      # ---------- CocoaPods ----------
      - name: Install CocoaPods via Bundler
        working-directory: ios/App
        run: bundle exec pod install --repo-update

      # ---------- Xcode ----------
      - name: Select Xcode version
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4' # iOS 17.5 SDK (συμβατό με target 17.0)

      # ---------- Keychain for codesign ----------
      - name: Setup Keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -l build.keychain
          security list-keychains -d user -s build.keychain

      # ---------- SSH key for match repo ----------
      - name: Start ssh-agent (match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}
      - name: Clear DerivedData
        run: rm -rf ~/Library/Developer/Xcode/DerivedData || true
      - name: Clean old gym logs
        run: rm -rf "$HOME/Library/Logs/gym" || true

      # ---------- Fastlane build & upload ----------
      - name: Build & Upload via Fastlane
        working-directory: ios/App
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          MATCH_GIT_URL: git@github.com:araksia/formypet-ios-certificates.git
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          APPLE_ID_EMAIL: ${{ secrets.APPLE_ID_EMAIL }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}
        run: bundle exec fastlane release --verbose

      # ---------- Troubleshooting artifacts ----------
      - name: Show last xcodebuild lines on failure
        if: failure()
        run: |
          LOGFILE=$(ls -1t "$HOME/Library/Logs/gym"/* 2>/dev/null | head -n1 || true)
          echo "Log file: $LOGFILE"
          if [ -f "$LOGFILE" ]; then tail -n 200 "$LOGFILE"; fi

      - name: Upload full gym logs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: gym-logs
          path: ~/Library/Logs/gym
