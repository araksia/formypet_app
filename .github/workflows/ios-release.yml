name: Build and Release iOS

on:
  workflow_dispatch: {}
  push:
    tags:
      - ios-v*

jobs:
  ios:
    runs-on: macos-14
    defaults:
      run:
        shell: bash
    env:
      LANG: en_US.UTF-8
      LC_ALL: en_US.UTF-8
      APP_BUNDLE_ID: gr.formypet.app
      BUILD_NUMBER: ${{ github.run_number }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) Xcode 16
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'

      - name: Show selected Xcode / SDK
        run: |
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version

      # 3) Node / web assets
      - name: Set up Node 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Configure npm auth (optional)
        run: |
          if [ -n "${NPM_TOKEN:-}" ]; then
            npm config set //registry.npmjs.org/:_authToken=${NPM_TOKEN}
          fi
          npm config set audit false
          npm config set fund false

      - name: Install JS dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            npm install
          fi

      - name: Build web assets (create ./dist)
        run: npm run build

      # 4) Ruby & Bundler
      - name: Set up Ruby 3.3
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Install gems for iOS (cocoapods/fastlane)
        working-directory: ios/App
        run: |
          set -e
          bundle config set path vendor/bundle
          bundle install --jobs 4 --retry 3

      # 5) Capacitor sync (χωρίς pods)
      - name: Sync Capacitor iOS (skip pods)
        env:
          CAPACITOR_SKIP_POD_INSTALL: '1'
        run: npx cap sync ios

      # 6) Firebase plist
      - name: Write GoogleService-Info.plist
        run: |
          set -e
          mkdir -p ios/App/App
          echo "$FIREBASE_IOS_PLIST_BASE64" | base64 --decode > ios/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist
        env:
          FIREBASE_IOS_PLIST_BASE64: ${{ secrets.FIREBASE_IOS_PLIST_BASE64 }}

      - name: Verify Firebase plist bundle id
        run: |
          set -e
          B=$(/usr/libexec/PlistBuddy -c "Print :BUNDLE_ID" ios/App/App/GoogleService-Info.plist)
          echo "Firebase BUNDLE_ID=$B"
          test "$B" = "$APP_BUNDLE_ID" || { echo "❌ GoogleService-Info.plist BUNDLE_ID != $APP_BUNDLE_ID"; exit 1; }

      # 7) CocoaPods
      - name: CocoaPods install
        working-directory: ios/App
        run: |
          set -e
          bundle exec pod repo update
          bundle exec pod install --repo-update

      # 8) (προαιρετικό) Build settings
      - name: Show schemes & build settings
        run: |
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme App -configuration Release | egrep 'INFOPLIST_FILE|PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER' || true

      # 9) Matchfile: βεβαιώσου ότι έχει app_identifier
      - name: Ensure Matchfile has app_identifier
        working-directory: ios/App/fastlane
        env:
          APP_BUNDLE_ID: ${{ env.APP_BUNDLE_ID }}
        run: |
          set -e
          test -n "$APP_BUNDLE_ID" || { echo "❌ APP_BUNDLE_ID missing"; exit 1; }
          touch Matchfile
          if grep -qE '^\s*app_identifier' Matchfile; then
            sed -i.bak -E "s#^\s*app_identifier.*#app_identifier([\"$APP_BUNDLE_ID\"])#g" Matchfile
          else
            printf '\napp_identifier(["%s"])\n' "$APP_BUNDLE_ID" >> Matchfile
          fi
          echo "== Matchfile ==" && cat Matchfile

      # 10) SSH για match repo
      - name: Start ssh-agent (match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Known hosts & git identity
        run: |
          set -e
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          git config --global user.email "ci@github.actions"
          git config --global user.name "GitHub Actions"
          git ls-remote "${{ secrets.MATCH_GIT_URL }}" -h

      # 11) Normalize ASC .p8 (raw ή base64) -> AuthKey.p8 (ΧΩΡΙΣ heredocs)
      - name: Normalize App Store Connect API key (no heredocs)
        working-directory: ios/App
        env:
          ASC_INPUT: ${{ secrets.APP_STORE_CONNECT_API_KEY_PEM }}
        run: |
          set -euo pipefail
          printf "%s" "$ASC_INPUT" | tr -d '\r' > key_input.txt
          if grep -q "BEGIN PRIVATE KEY" key_input.txt; then
            cp key_input.txt AuthKey.p8
          else
            base64 --decode key_input.txt > AuthKey.p8 2>/dev/null || \
            base64 -d      key_input.txt > AuthKey.p8 2>/dev/null || \
            base64 -D      key_input.txt > AuthKey.p8 2>/dev/null || \
            /usr/bin/python3 -c 'import base64,sys; open("AuthKey.p8","wb").write(base64.b64decode(open("key_input.txt","rb").read()))' || \
            { echo "❌ Failed to parse APP_STORE_CONNECT_API_KEY_PEM (not PEM or base64)"; exit 1; }
          fi
          /usr/bin/openssl pkey -in AuthKey.p8 -noout -text | head -n 8 || true

      # 12) asc_api_key.json για smoke test (ΧΩΡΙΣ heredocs)
      - name: Create App Store Connect API JSON
        working-directory: ios/App
        env:
          ASC_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          ASC_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
        run: |
          set -euo pipefail
          /usr/bin/python3 -c 'import json,os; pem=open("AuthKey.p8","r",encoding="utf-8",errors="ignore").read(); kid=os.getenv("ASC_KEY_ID"); iss=os.getenv("ASC_ISSUER_ID"); json.dump({"key_id":kid,"issuer_id":iss,"key":pem,"in_house":False}, open("asc_api_key.json","w"))'
          echo "APP_STORE_CONNECT_API_KEY_PATH=$PWD/asc_api_key.json" >> "$GITHUB_ENV"

      # 13) Smoke test ASC JWT (fail νωρίς αν είναι λάθος)
      - name: Smoke test App Store Connect JWT
        working-directory: ios/App
        run: |
          set -euo pipefail
          JWT=$(bundle exec ruby -e "require 'spaceship/connect_api'; t=Spaceship::ConnectAPI::Token.from_json_file('asc_api_key.json'); puts t.text")
          echo "JWT length: ${#JWT}"
          code=$(curl -sS -o /dev/null -w "%{http_code}" -H "Authorization: Bearer $JWT" "https://api.appstoreconnect.apple.com/v1/apps?limit=1")
          echo "ASC /v1/apps -> HTTP $code"
          [ "$code" = "200" ] || { echo "❌ ASC JWT invalid ($code)"; exit 1; }

      # 14) Info.plist: usage strings (ATT/Camera/Photos) για αποφυγή crash στο launch
      - name: Ensure Info.plist has usage strings
        run: |
          set -e
          P=ios/App/App/Info.plist
          /usr/libexec/PlistBuddy -c 'Print :NSUserTrackingUsageDescription' "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c 'Add :NSUserTrackingUsageDescription string This identifier will be used to deliver a better app experience.' "$P"
          /usr/libexec/PlistBuddy -c 'Print :NSCameraUsageDescription' "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c 'Add :NSCameraUsageDescription string We use the camera to let you take photos.' "$P"
          /usr/libexec/PlistBuddy -c 'Print :NSPhotoLibraryUsageDescription' "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c 'Add :NSPhotoLibraryUsageDescription string We need photo library access to select images.' "$P"
          /usr/libexec/PlistBuddy -c 'Print :NSPhotoLibraryAddUsageDescription' "$P" 2>/dev/null || /usr/libexec/PlistBuddy -c 'Add :NSPhotoLibraryAddUsageDescription string We save images to your library when requested.' "$P"
          /usr/bin/plutil -lint "$P"

      # 15) Patch Fastfile να χρησιμοποιεί key_filepath (όχι key_content)
      - name: Patch Fastfile for key_filepath
        working-directory: ios/App/fastlane
        run: |
          set -euo pipefail
          test -f Fastfile || { echo "❌ Fastfile not found"; exit 1; }
          cp Fastfile Fastfile.bak
          sed -E -i '' "s/key_content:\s*ENV\[[^]]+\]/key_filepath: ENV['APP_STORE_CONNECT_API_KEYFILE_PATH'] || 'AuthKey.p8'/g" Fastfile
          echo "✅ Patched Fastfile to use key_filepath"

      # 16) Fastlane release (build + sign + upload TestFlight)
      - name: Fastlane release (TestFlight)
        working-directory: ios/App
        env:
          APP_BUNDLE_ID: ${{ env.APP_BUNDLE_ID }}
          BUILD_NUMBER: ${{ env.BUILD_NUMBER }}
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BRANCH: main
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEYFILE_PATH: ${{ github.workspace }}/ios/App/AuthKey.p8
        run: |
          set -e
          bundle exec fastlane release

      # 17) Artifacts / logs
      - name: Upload build artifacts & logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-build
          path: |
            ios/App/build/*.ipa
            ~/Library/Logs/gym/*
            ~/Library/Developer/Xcode/DerivedData/**/Logs/**
