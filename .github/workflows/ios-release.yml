name: iOS Release (Capacitor + Fastlane)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Override BUILD_NUMBER (optional)"
        required: false
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ios-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ios-build:
    runs-on: macos-15

    env:
      # ---- App / build ----
      SCHEME_NAME: App
      APP_BUNDLE_ID: gr.formypet.app
      BUILD_NUMBER: ${{ inputs.build_number || '237' }}

      # ---- fastlane match (git over SSH) ----
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # ---- App Store Connect API (raw .p8) ----
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # ---- Optional ----
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # =========================
      # SSH Deploy Key for match
      # =========================
      - name: Start ssh-agent & add deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Trust github.com host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa -H github.com >> ~/.ssh/known_hosts

      - name: Sanity check SSH access to MATCH_GIT_URL
        run: |
          git ls-remote --heads "${MATCH_GIT_URL}"
          echo "✅ SSH access OK"

      # =========================
      # Toolchains
      # =========================
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Force DEVELOPER_DIR
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          echo "DEVELOPER_DIR=/Applications/Xcode_16.2.app/Contents/Developer" >> $GITHUB_ENV
          xcode-select -p

      - name: Show installed SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks
          xcrun --sdk iphoneos --show-sdk-version
          xcrun --sdk iphoneos --show-sdk-path

      # =========================
      # Web build
      # =========================
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Print tool versions
        run: |
          node -v
          npm -v
          ruby -v
          gem -v

      - name: Setup .npmrc (if NPM_TOKEN)
        if: ${{ env.NPM_TOKEN != '' }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install JS deps
        run: npm ci

      - name: Build web assets
        run: npm run build

      # =========================
      # CocoaPods / Capacitor
      # =========================
      - name: Prepare Ruby gems (ios/App)
        working-directory: ios/App
        run: |
          if [ -f Gemfile ]; then
            bundle lock --add-platform arm64-darwin-23 x86_64-darwin-23 ruby || true
            bundle config set path 'vendor/bundle'
            bundle install --jobs 4
            bundle exec pod --version
          else
            gem install cocoapods -N
            pod --version
          fi

      - name: Write GoogleService-Info.plist (from secret)
        if: ${{ env.GOOGLE_SERVICE_INFO_PLIST != '' }}
        run: |
          mkdir -p ios/App/App ios/App/App/App
          CONTENT="${GOOGLE_SERVICE_INFO_PLIST}"
          if echo "$CONTENT" | head -n1 | grep -Eqi '^\s*<\?xml|^\s*\{'; then
            printf "%s" "$CONTENT" > ios/App/App/GoogleService-Info.plist
          else
            printf "%s" "$CONTENT" | base64 --decode > ios/App/App/GoogleService-Info.plist || \
            printf "%s" "$CONTENT" | base64 -d        > ios/App/App/GoogleService-Info.plist
          fi
          cp ios/App/App/GoogleService-Info.plist ios/App/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist || true

      - name: Capacitor sync iOS
        run: npx cap sync ios

      - name: Ensure CocoaPods install
        working-directory: ios/App
        run: |
          pod repo update
          pod install --repo-update

      # =========================
      # AUTO-GENERATE SHARED SCHEME (no Xcode needed)
      # =========================
      - name: Generate shared scheme if missing
        run: |
          set -euo pipefail
          PROJ="ios/App/App.xcodeproj"
          PBX="$PROJ/project.pbxproj"
          SCHEMES_DIR="$PROJ/xcshareddata/xcschemes"
          mkdir -p "$SCHEMES_DIR"

          if [ ! -f "$PBX" ]; then
            echo "❌ project.pbxproj not found at $PBX"; exit 1
          fi

          if [ -f "$SCHEMES_DIR/${SCHEME_NAME}.xcscheme" ]; then
            echo "✅ Shared scheme already exists: $SCHEMES_DIR/${SCHEME_NAME}.xcscheme"
            exit 0
          fi

          echo "🔎 Extracting target UUID/product from project.pbxproj..."
          TARGET_UUID=$(awk '/\/\* '"${SCHEME_NAME}"' \*\/ = \{/{print $1; exit}' "$PBX" | tr -d ' ')
          if [ -z "${TARGET_UUID:-}" ]; then
            echo "❌ Could not find PBXNativeTarget for '${SCHEME_NAME}' in $PBX"
            echo "   Available targets:"; grep -n "PBXNativeTarget" -n "$PBX" | head -n 50 || true
            exit 1
          fi

          PRODUCT_NAME=$(awk -v uuid="$TARGET_UUID" '
            $0 ~ uuid" " && $0 ~ /\=\ \{/ {inblock=1}
            inblock && /productName/ {gsub(/[; ]/,""); split($0,a,"="); print a[2]; exit}
          ' "$PBX")

          BUILDABLE_NAME=$(awk -v uuid="$TARGET_UUID" '
            $0 ~ uuid" " && $0 ~ /\=\ \{/ {inblock=1}
            inblock && /path = .*\.app/ {match($0,/path = ([^;]+)\.app/,m); if (m[1]!=""){print m[1]".app"; exit}}
          ' "$PBX")

          [ -z "${PRODUCT_NAME:-}" ] && PRODUCT_NAME="${SCHEME_NAME}"
          [ -z "${BUILDABLE_NAME:-}" ] && BUILDABLE_NAME="${PRODUCT_NAME}.app"

          echo "🆔 TARGET_UUID=$TARGET_UUID"
          echo "📦 PRODUCT_NAME=$PRODUCT_NAME"
          echo "🧱 BUILDABLE_NAME=$BUILDABLE_NAME"

          SCHEME_PATH="$SCHEMES_DIR/${SCHEME_NAME}.xcscheme"
          cat > "$SCHEME_PATH" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <Scheme
             LastUpgradeVersion = "1630"
             version = "1.7">
             <BuildAction parallelizeBuildables = "YES" buildImplicitDependencies = "YES">
                <BuildActionEntries>
                   <BuildActionEntry buildForTesting = "YES" buildForRunning = "YES" buildForProfiling = "YES" buildForArchiving = "YES" buildForAnalyzing = "YES">
                      <BuildableReference
                         BuildableIdentifier = "primary"
                         BlueprintIdentifier = "${TARGET_UUID}"
                         BuildableName = "${BUILDABLE_NAME}"
                         BlueprintName = "${SCHEME_NAME}"
                         ReferencedContainer = "container:App.xcodeproj">
                      </BuildableReference>
                   </BuildActionEntry>
                </BuildActionEntries>
             </BuildAction>
             <TestAction buildConfiguration = "Debug" selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB" shouldUseLaunchSchemeArgsEnv = "YES">
                <Testables></Testables>
             </TestAction>
             <LaunchAction buildConfiguration = "Release" selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB" selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB" launchStyle = "0" useCustomWorkingDirectory = "NO" ignoresPersistentStateOnLaunch = "NO" debugDocumentVersioning = "YES" debugServiceExtension = "internal" allowLocationSimulation = "YES">
                <BuildableProductRunnable runnableDebuggingMode = "0">
                   <BuildableReference
                      BuildableIdentifier = "primary"
                      BlueprintIdentifier = "${TARGET_UUID}"
                      BuildableName = "${BUILDABLE_NAME}"
                      BlueprintName = "${SCHEME_NAME}"
                      ReferencedContainer = "container:App.xcodeproj">
                   </BuildableReference>
                </BuildableProductRunnable>
             </LaunchAction>
             <ProfileAction buildConfiguration = "Release" shouldUseLaunchSchemeArgsEnv = "YES" savedToolIdentifier = "" useCustomWorkingDirectory = "NO" debugDocumentVersioning = "YES">
                <BuildableProductRunnable runnableDebuggingMode = "0">
                   <BuildableReference
                      BuildableIdentifier = "primary"
                      BlueprintIdentifier = "${TARGET_UUID}"
                      BuildableName = "${BUILDABLE_NAME}"
                      BlueprintName = "${SCHEME_NAME}"
                      ReferencedContainer = "container:App.xcodeproj">
                   </BuildableReference>
                </BuildableProductRunnable>
             </ProfileAction>
             <AnalyzeAction buildConfiguration = "Debug"/>
             <ArchiveAction buildConfiguration = "Release" revealArchiveInOrganizer = "YES"/>
          </Scheme>
          EOF

          # Remove leading spaces from here-doc indentation
          sed -i '' -e 's/^[[:space:]]\{10\}//' "$SCHEME_PATH" || true

          echo "✅ Created shared scheme at: $SCHEME_PATH"
          # Show that xcodebuild now sees it
          xcodebuild -list -project "$PROJ" || true
          xcodebuild -list -workspace ios/App/App.xcworkspace || true

      # (προαιρετικά) Resolve Swift Packages
      - name: Resolve Swift Packages
        run: |
          xcodebuild -resolvePackageDependencies \
            -workspace ios/App/App.xcworkspace \
            -scheme "${SCHEME_NAME}" \
            -clonedSourcePackagesDirPath "$HOME/spm-cache"

      - name: Verify workspace & scheme
        run: |
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme "${SCHEME_NAME}" | egrep "PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN|PROVISIONING_PROFILE_SPECIFIER|SDKROOT" || true

      # =========================
      # Fastlane
      # =========================
      - name: Fastlane release
        working-directory: ios/App
        env:
          DEVELOPER_DIR: /Applications/Xcode_16.2.app/Contents/Developer
        run: |
          if [ -f Gemfile ]; then
            bundle exec fastlane release
          else
            fastlane release
          fi

      # =========================
      # Diagnostics
      # =========================
      - name: Print first errors from gym
        if: failure()
        run: |
          LOG=$(ls -t ~/Library/Logs/gym/*.log 2>/dev/null | head -n1 || true)
          if [ -n "$LOG" ]; then
            echo "== First errors in gym log =="
            grep -nE "❌|error:|fatal error:|CodeSign|Provisioning" "$LOG" | head -n 15 || true
            echo "== Tail (last 200 lines) =="
            tail -n 200 "$LOG" || true
          else
            echo "No gym log found"
          fi

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            ~/Library/Logs/gym/**
            ios/App/fastlane/build_logs/**
          if-no-files-found: warn

      - name: Upload xcresult bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-xcresult
          path: |
            ios/App/build/*.xcresult
            ~/Library/Logs/gym/*.xcresult
          if-no-files-found: ignore

      # =========================
      # Inspect IPA (on success)
      # =========================
      - name: Inspect built IPA (only on success)
        if: ${{ success() }}
        run: |
          IPA=$(ls -t ios/App/build/*.ipa 2>/dev/null | head -n1 || true)
          [[ -z "$IPA" ]] && { echo "❌ No IPA found"; exit 1; }
          echo "📦 Inspecting $IPA"
          TMP=$(mktemp -d)
          unzip -q "$IPA" -d "$TMP"
          APP_PATH=$(/usr/bin/find "$TMP/Payload" -type d -name '*.app' -print -quit)
          echo "🧩 App bundle: $APP_PATH"
          /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
          /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true

      - name: Upload IPA artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            ios/App/build/*.ipa
            **/App.dSYM.zip
          if-no-files-found: warn
