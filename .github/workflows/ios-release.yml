name: iOS Release (Capacitor + Fastlane)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Override BUILD_NUMBER (optional)"
        required: false
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ios-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ios-build:
    runs-on: macos-15

    env:
      # ---- App / build ----
      APP_BUNDLE_ID: gr.formypet.app
      BUILD_NUMBER: ${{ inputs.build_number || '237' }}

      # ---- fastlane match (git storage over SSH) ----
      # ΠΡΕΠΕΙ να είναι SSH URL (git@github.com:owner/repo.git)
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # ---- App Store Connect API (RAW .p8, ΟΧΙ base64) ----
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # ---- Optional ----
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # δεν χρειάζεται GitHub token για το private cert repo (θα πάμε με SSH key)
          persist-credentials: false

      # =========================
      # SSH Deploy Key for match
      # =========================
      - name: Start ssh-agent & add deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Trust github.com host
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa -H github.com >> ~/.ssh/known_hosts

      - name: Sanity check SSH access to MATCH_GIT_URL
        run: |
          set -euo pipefail
          if [ -z "${MATCH_GIT_URL:-}" ]; then
            echo "❌ MATCH_GIT_URL is empty"; exit 1
          fi
          if [[ ! "${MATCH_GIT_URL}" =~ ^git@github\.com:.+\.git$ ]]; then
            echo "❌ MATCH_GIT_URL must be SSH form like git@github.com:owner/repo.git"
            echo "   Current: ${MATCH_GIT_URL}"
            exit 1
          fi
          echo "🔎 Testing ssh access to ${MATCH_GIT_URL}..."
          git ls-remote --heads "${MATCH_GIT_URL}" >/dev/null
          echo "✅ SSH access OK"

      # =========================
      # Toolchains
      # =========================
      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Force DEVELOPER_DIR
        run: |
          sudo xcode-select -s /Applications/Xcode_16.2.app
          echo "DEVELOPER_DIR=/Applications/Xcode_16.2.app" >> $GITHUB_ENV
          xcode-select -p

      - name: Show installed SDKs
        run: |
          xcodebuild -version
          xcodebuild -showsdks
          xcrun --sdk iphoneos --show-sdk-version
          xcrun --sdk iphoneos --show-sdk-path

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Print tool versions
        run: |
          node -v
          npm -v
          ruby -v
          gem -v

      # =========================
      # Web build
      # =========================
      - name: Setup .npmrc (if NPM_TOKEN)
        if: ${{ env.NPM_TOKEN != '' }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install JS deps
        run: npm ci

      - name: Build web assets
        run: npm run build

      # =========================
      # CocoaPods / Capacitor
      # =========================
      - name: Prepare Ruby gems (ios/App)
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle lock --add-platform arm64-darwin-23 x86_64-darwin-23 ruby || true
            bundle config set path 'vendor/bundle'
            bundle install --jobs 4
            bundle exec pod --version
          else
            gem install cocoapods -N
            pod --version
          fi

      - name: Write GoogleService-Info.plist (from secret)
        if: ${{ env.GOOGLE_SERVICE_INFO_PLIST != '' }}
        run: |
          set -euo pipefail
          mkdir -p ios/App/App ios/App/App/App
          CONTENT="${GOOGLE_SERVICE_INFO_PLIST}"
          if echo "$CONTENT" | head -n1 | grep -Eqi '^\s*<\?xml|^\s*\{'; then
            printf "%s" "$CONTENT" > ios/App/App/GoogleService-Info.plist
          else
            printf "%s" "$CONTENT" | base64 --decode > ios/App/App/GoogleService-Info.plist || \
            printf "%s" "$CONTENT" | base64 -d        > ios/App/App/GoogleService-Info.plist
          fi
          cp ios/App/App/GoogleService-Info.plist ios/App/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist || true

      - name: Capacitor sync iOS
        run: npx cap sync ios

      - name: Ensure CocoaPods install
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Verify workspace & scheme
        run: |
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme App | egrep "PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN|PROVISIONING_PROFILE_SPECIFIER|SDKROOT" || true

      # =========================
      # Fastlane
      # =========================
      - name: Fastlane release
        working-directory: ios/App
        env:
          DEVELOPER_DIR: /Applications/Xcode_16.2.app
        run: |
          set -e
          if [ -f Gemfile ]; then
            bundle exec fastlane release
          else
            fastlane release
          fi

      # =========================
      # Diagnostics
      # =========================
      - name: Show xcodebuild logs (first error)
        if: failure()
        run: |
          echo "== Gym logs =="
          ls -la ~/Library/Logs/gym || true
          LOG=$(ls -t ~/Library/Logs/gym/*.log 2>/dev/null | head -n1 || true)
          if [ -n "$LOG" ]; then
            echo ">> First error line in $LOG"
            grep -nE "error:|❌|fatal error:" "$LOG" | head -n1 || true
            echo ">> Context around the first error:"
            LN=$(grep -nE "error:|❌|fatal error:" "$LOG" | head -n1 | cut -d: -f1 || echo "")
            if [ -n "$LN" ]; then
              START=$((LN>50?LN-50:1))
              END=$((LN+50))
              sed -n "${START},${END}p" "$LOG"
            else
              tail -n 400 "$LOG"
            fi
          else
            echo "No gym log found"
          fi

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            ~/Library/Logs/gym/**
            ios/App/fastlane/build_logs/**
          if-no-files-found: warn
          
      - name: Dump first error line from gym log
        if: failure()
        run: |
          LOG=$(ls -t ~/Library/Logs/gym/*.log 2>/dev/null | head -n1 || true)
          if [ -n "$LOG" ]; then
            echo ">> First error line:"
            grep -nE "error:|❌|fatal error:" "$LOG" | head -n1 || true
            echo ">> Last 200 lines:"
            tail -n 200 "$LOG"
          else
            echo "No gym log found"
          fi

      - name: Inspect built IPA (only on success)
        if: ${{ success() }}
        run: |
          set -euo pipefail
          candidates=(ios/App/build/*.ipa ios/App/*.ipa *.ipa)
          IPA=""
          for c in "${candidates[@]}"; do
            if [[ -f $c ]]; then
              echo "📦 Inspecting: $c"
              IPA="$c"
              break
            fi
          done
          [[ -z "$IPA" ]] && { echo "❌ No IPA found"; exit 1; }

          TMP=$(mktemp -d)
          unzip -q "$IPA" -d "$TMP"
          APP_PATH=$(/usr/bin/find "$TMP/Payload" -type d -name '*.app' -print -quit)
          [[ -z "$APP_PATH" ]] && { echo "❌ .app not found in IPA"; exit 1; }
          echo "🧩 App bundle: $APP_PATH"

          echo "== Check GoogleService-Info.plist =="
          if [[ ! -f "$APP_PATH/GoogleService-Info.plist" ]]; then
            echo "❌ GoogleService-Info.plist is missing from .app"
            /usr/bin/find "$APP_PATH" -name GoogleService-Info.plist | sed 's/^/ - /'
            exit 1
          fi
          /usr/bin/plutil -lint "$APP_PATH/GoogleService-Info.plist" || true
          /usr/libexec/PlistBuddy -c "Print :BUNDLE_ID" "$APP_PATH/GoogleService-Info.plist" || true

          echo "== Check aps-environment (entitlements & provisioning) =="
          /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
          /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist
          /usr/bin/security cms -D -i "$APP_PATH/embedded.mobileprovision" > profile.plist
          /usr/libexec/PlistBuddy -c "Print :Entitlements:aps-environment" profile.plist

      - name: Upload IPA artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            ios/App/build/*.ipa
            **/App.dSYM.zip
          if-no-files-found: warn
