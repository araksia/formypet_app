name: Build and Release iOS

on:
  workflow_dispatch: {}
  push:
    tags:
      - ios-v*

jobs:
  ios:
    runs-on: macos-14
    defaults:
      run:
        shell: bash
    env:
      BUNDLE_PATH: vendor/bundle
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      APP_BUNDLE_ID: gr.formypet.app
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: "16.*"

      - name: Show selected Xcode / SDK
        run: |
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.2"
          bundler-cache: false

      - name: Install gems
        working-directory: ios/App
        run: |
          bundle install --jobs 4 --retry 3

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          registry-url: https://registry.npmjs.org
          cache: npm

      - name: Configure npm auth (optional)
        run: |
          if [ -n "${NPM_TOKEN:-}" ]; then
            npm config set //registry.npmjs.org/:_authToken="${NPM_TOKEN}"
          fi
          npm config set audit false
          npm config set fund false

      - name: Install JS dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci --prefer-online || (echo "retry" && sleep 5 && npm ci --prefer-online)
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            npm install
          fi

      - name: Build web assets
        run: npm run build

      - name: Fix absolute paths in dist/index.html
        run: |
          set -e
          test -f dist/index.html || { echo "dist/index.html missing"; exit 1; }
          if grep -nE 'href="/|src="/' dist/index.html; then
            sed -i.bak -E 's#href="/#href="./#g; s#src="/#src="./#g' dist/index.html
          fi
          head -n 40 dist/index.html

      - name: Show Capacitor config
        run: |
          npx cap --version
          npx cap doctor || true
          npx cap config --json || true
          grep -R --line-number -E "webDir|server" capacitor.config.* || true

      - name: Sync Capacitor iOS (skip pods)
        env:
          CAPACITOR_SKIP_POD_INSTALL: "1"
        run: npx cap sync ios

      - name: Inject debug helpers inside index.html (safe)
        run: |
          set -e
          HTML=""
          for P in ios/App/App/public ios/App/public; do
            if [ -f "$P/index.html" ]; then HTML="$P/index.html"; break; fi
          done
          test -n "$HTML" || { echo "public/index.html missing"; exit 1; }

          cat > /tmp/insert_head.html <<'HEADBLOCK'
<script>try{alert("DEBUG: index.html loaded");}catch(e){}</script>
<script>
window.onerror=function(m,s,l,c,e){alert("JS Error: "+m+" @ "+(s||"")+":"+(+l||0))};
window.addEventListener("unhandledrejection",function(ev){var r=ev&&ev.reason;alert("UnhandledRejection: "+(r&&(r.message||r)))});
</script>
<style>html,body,#root{height:100%;min-height:100%;margin:0;background:#fff}</style>
HEADBLOCK

          awk 'BEGIN{ins=0} ins==0 && /<head>/ { print; system("cat /tmp/insert_head.html"); ins=1; next } { print }' "$HTML" > "$HTML.tmp" && mv "$HTML.tmp" "$HTML"

          cat > /tmp/insert_body.html <<'BODYBLOCK'
<div style="position:fixed;top:0;left:0;right:0;z-index:99999;background:#c00;color:#fff;padding:8px;text-align:center;font-weight:bold">DEBUG BUILD: index.html LOADED</div>
BODYBLOCK

          awk 'BEGIN{ins=0} ins==0 && /<body>/ { print; system("cat /tmp/insert_body.html"); ins=1; next } { print }' "$HTML" > "$HTML.tmp" && mv "$HTML.tmp" "$HTML"

          # strip crossorigin on local files
          /usr/bin/sed -i '' -E 's/ crossorigin//g' "$HTML"

          head -n 40 "$HTML"

      - name: Ensure JS bundle exists
        run: |
          set -e
          ASSETS="ios/App/App/public/assets"
          test -d "$ASSETS" || { echo "$ASSETS missing"; exit 1; }
          HTML="ios/App/App/public/index.html"
          MAIN=$(grep -oE './assets/[A-Za-z0-9._-]+\.js' "$HTML" | head -n1 | sed 's|^\./||')
          test -n "$MAIN" || { echo "no main js in index.html"; exit 1; }
          test -s "ios/App/App/public/$MAIN" || { echo "main bundle is empty"; exit 1; }
          head -n 30 "ios/App/App/public/$MAIN" || true

      - name: Ensure xcodeproj gem
        run: gem install xcodeproj -N

      - name: Write GoogleService-Info.plist
        run: |
          mkdir -p ios/App/App
          echo "$FIREBASE_IOS_PLIST_BASE64" | base64 --decode > ios/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist
          /usr/libexec/PlistBuddy -c "Print :BUNDLE_ID" ios/App/App/GoogleService-Info.plist
        env:
          FIREBASE_IOS_PLIST_BASE64: ${{ secrets.FIREBASE_IOS_PLIST_BASE64 }}

      - name: Add plist to Xcode target (if missing)
        working-directory: ios/App
        run: |
          ruby -e "require 'xcodeproj';
          p='App.xcodeproj';
          proj=Xcodeproj::Project.open(p);
          t=proj.targets.find{|t| t.name=='App'} or abort('No target App');
          path='App/GoogleService-Info.plist';
          ref=proj.main_group.find_file_by_path(path) || proj.main_group.new_file(path);
          unless t.resources_build_phase.files_references.include?(ref)
            t.add_resources([ref]); puts 'Added GoogleService-Info.plist to Resources';
          else
            puts 'GoogleService-Info.plist already in Resources';
          end
          proj.save"

      - name: Recreate Info.plist if invalid
        run: |
          set -e
          FILE="ios/App/App/Info.plist"
          if ! /usr/bin/plutil -lint "$FILE" >/dev/null 2>&1; then
            /usr/bin/plutil -create xml1 "$FILE"
            PB="/usr/libexec/PlistBuddy -c"
            $PB 'Add :CFBundleDevelopmentRegion string en' "$FILE"
            $PB 'Add :CFBundleExecutable string $(EXECUTABLE_NAME)' "$FILE"
            $PB 'Add :CFBundleIdentifier string $(PRODUCT_BUNDLE_IDENTIFIER)' "$FILE"
            $PB 'Add :CFBundleInfoDictionaryVersion string 6.0' "$FILE"
            $PB 'Add :CFBundleName string $(PRODUCT_NAME)' "$FILE"
            $PB 'Add :CFBundlePackageType string APPL' "$FILE"
            $PB 'Add :CFBundleShortVersionString string $(MARKETING_VERSION)' "$FILE"
            $PB 'Add :CFBundleVersion string $(CURRENT_PROJECT_VERSION)' "$FILE"
            $PB 'Add :UILaunchStoryboardName string LaunchScreen' "$FILE"
            $PB 'Add :UIMainStoryboardFile string Main' "$FILE"
            $PB 'Add :UIRequiredDeviceCapabilities array' "$FILE"
            $PB 'Add :UIRequiredDeviceCapabilities:0 string arm64' "$FILE"
            $PB 'Add :UISupportedInterfaceOrientations array' "$FILE"
            $PB 'Add :UISupportedInterfaceOrientations:0 string UIInterfaceOrientationPortrait' "$FILE"
            $PB 'Add :UISupportedInterfaceOrientations:1 string UIInterfaceOrientationLandscapeLeft' "$FILE"
            $PB 'Add :UISupportedInterfaceOrientations:2 string UIInterfaceOrientationLandscapeRight' "$FILE"
            $PB 'Add :UIApplicationSceneManifest dict' "$FILE"
            $PB 'Add :UIApplicationSceneManifest:UIApplicationSupportsMultipleScenes bool false' "$FILE"
            /usr/bin/plutil -lint "$FILE"
          fi

      - name: Install CocoaPods
        working-directory: ios/App
        run: |
          if bundle exec pod --version >/dev/null 2>&1; then
            echo "Using CocoaPods from Gemfile"
          else
            gem install cocoapods -N
          fi
          pod repo update
          bundle exec pod install --repo-update || pod install --repo-update

      - name: Ensure shared scheme exists
        working-directory: ios/App
        run: |
          set -euo pipefail
          PROJ="App.xcodeproj"
          SHARE="$PROJ/xcshareddata/xcschemes"
          USERDIR=$(ls -1d "$PROJ"/xcuserdata/* 2>/dev/null | head -n1 || true)
          if [ -n "$USERDIR" ] && [ -d "$USERDIR/xcschemes" ]; then
            mkdir -p "$SHARE"
            cp "$USERDIR/xcschemes/"*.xcscheme "$SHARE"/ || true
            echo "Copied user schemes to shared."
          else
            echo "No user schemes to copy."
          fi

      - name: Show Xcode schemes and build settings
        run: |
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme App -configuration Release | egrep 'INFOPLIST_FILE|PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|SWIFT_VERSION|IPHONEOS_DEPLOYMENT_TARGET'

      - name: Start ssh-agent (for match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git for match
        run: |
          git config --global user.email "ci@github.actions"
          git config --global user.name "GitHub Actions"

      - name: Check access to match repo
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: git ls-remote "$MATCH_GIT_URL" -h

      - name: Build & Release with fastlane
        working-directory: ios/App
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
          MATCH_GIT_BRANCH: main
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          BUILD_NUMBER: ${{ github.run_number }}
        run: bundle exec fastlane release

      - name: Print last gym log on failure
        if: failure()
        run: |
          LOG=$(ls -t ~/Library/Logs/gym/App-*.log | head -n1 || true)
          if [ -n "$LOG" ]; then
            tail -n +1 "$LOG"
          else
            echo "No gym log found"
          fi

      - name: Upload Xcode logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: |
            ~/Library/Logs/gym/*
            ~/Library/Developer/Xcode/DerivedData/**/Logs/**
