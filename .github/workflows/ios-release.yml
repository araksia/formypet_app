name: iOS Release (Capacitor + Fastlane)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Override BUILD_NUMBER (optional)"
        required: false
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ios-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ios-build:
    runs-on: macos-15

    env:
      # ---- App / Build ----
      APP_BUNDLE_ID: gr.formypet.app
      BUILD_NUMBER: ${{ inputs.build_number || github.run_number }}

      # ---- Match repo (ŒºŒ∑ secret œÑŒø slug, secret œÑŒø PAT) ----
      MATCH_GIT_REPO: araksia/formypet-ios-certificates
      MATCH_REPO_PAT: ${{ secrets.MATCH_REPO_PAT }}

      # ---- Fastlane/Match secrets ----
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # ---- App Store Connect API Key (RAW .p8, ŒüŒßŒô base64) ----
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}

      # ---- Optional ----
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

      # ---- Xcode ----
      MD_APPLE_SDK_ROOT: /Applications/Xcode_16.2.app

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Select Xcode 16.2
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Print tool versions
        run: |
          node -v
          npm -v
          ruby -v
          gem -v
          xcodebuild -version

      - name: Setup .npmrc (if NPM_TOKEN)
        if: ${{ env.NPM_TOKEN != '' }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install JS deps
        run: npm ci

      - name: Build web assets
        run: npm run build

      # ---------- PREAUTH Œ≥ŒπŒ± œÑŒø match repo ŒºŒµ PAT ----------
      - name: Build MATCH_GIT_URL & pre-auth
        run: |
          set -euo pipefail
          # 1) Œ¶œÑŒπŒ¨œáŒΩŒøœÖŒºŒµ Œ∫Œ±Œ∏Œ±œÅœå HTTPS URL Œ±œÄœå œÑŒø slug
          URL="https://github.com/${MATCH_GIT_REPO}.git"
          echo "MATCH_GIT_URL=${URL}" >> "$GITHUB_ENV"

          # 2) Pre-auth œéœÉœÑŒµ Œü,Œ§Œô œÄŒµœÅŒΩŒ¨ŒµŒπ Œ±œÄœå github.com ŒΩŒ± œáœÅŒ∑œÉŒπŒºŒøœÄŒøŒπŒµŒØ œÑŒø PAT
          if [ -n "${MATCH_REPO_PAT:-}" ]; then
            git config --global url."https://x-access-token:${MATCH_REPO_PAT}@github.com/".insteadOf https://github.com/
            git config --global url."https://x-access-token:${MATCH_REPO_PAT}@github.com/".insteadOf ssh://git@github.com/
            git config --global url."https://x-access-token:${MATCH_REPO_PAT}@github.com/".insteadOf git@github.com:
          fi

          echo "‚úÖ MATCH_GIT_URL set to: ${URL}"

      - name: Check PAT access via GitHub API (debug)
        run: |
          set -euo pipefail
          if [ -z "${MATCH_REPO_PAT:-}" ]; then
            echo "‚ö†Ô∏è  No MATCH_REPO_PAT provided, skipping API check"
            exit 0
          fi
          SLUG="${MATCH_GIT_REPO}"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: token ${MATCH_REPO_PAT}" \
            "https://api.github.com/repos/${SLUG}")
          echo "GitHub API status for ${SLUG}: ${CODE}"
          if [ "${CODE}" != "200" ]; then
            echo "‚ùå Œ§Œø PAT ŒîŒïŒù Œ≠œáŒµŒπ œÄœÅœåœÉŒ≤Œ±œÉŒ∑ œÉœÑŒø repo ŒÆ œÑŒø repo Œ¥ŒµŒΩ œÖœÄŒ¨œÅœáŒµŒπ/ŒµŒØŒΩŒ±Œπ ŒªŒ¨Œ∏ŒøœÇ slug."
            echo "   - ŒíŒµŒ≤Œ±ŒπœéœÉŒøœÖ œåœÑŒπ œÑŒø repo œÖœÄŒ¨œÅœáŒµŒπ Œ∫Œ±Œπ ŒµŒØŒΩŒ±Œπ Œ±Œ∫œÅŒπŒ≤œéœÇ: ${SLUG}"
            echo "   - Œ§Œø PAT œÄœÅŒ≠œÄŒµŒπ ŒΩŒ± Œ≠œáŒµŒπ scope: repo (Œ∫Œ±Œπ SSO authorized, Œ±ŒΩ œÑŒø repo ŒµŒØŒΩŒ±Œπ œÉŒµ org ŒºŒµ SSO)."
            exit 1
          fi
          echo "‚úÖ PAT has access"

      - name: Sanity check ls-remote
        run: |
          set -euo pipefail
          echo "Testing git ls-remote on ${MATCH_GIT_URL}"
          git ls-remote --heads "${MATCH_GIT_URL}" >/dev/null
          echo "‚úÖ ls-remote OK"

      # ---------- Œ†œÅŒøŒµœÑŒøŒπŒºŒ±œÉŒØŒ± Bundler/CocoaPods Œ†Œ°ŒôŒù œÑŒø cap sync ----------
      - name: Prepare Ruby gems (ios/App)
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle lock --add-platform arm64-darwin-23 x86_64-darwin-23 ruby || true
            bundle config set path 'vendor/bundle'
            bundle install --jobs 4
            bundle exec pod --version
          else
            gem install cocoapods -N
            pod --version
          fi

      - name: Write GoogleService-Info.plist (from secret)
        if: ${{ env.GOOGLE_SERVICE_INFO_PLIST != '' }}
        run: |
          set -euo pipefail
          mkdir -p ios/App/App ios/App/App/App
          CONTENT="${GOOGLE_SERVICE_INFO_PLIST}"
          if echo "$CONTENT" | head -n1 | grep -Eqi '^\s*<\?xml|^\s*\{'; then
            printf "%s" "$CONTENT" > ios/App/App/GoogleService-Info.plist
          else
            printf "%s" "$CONTENT" | base64 --decode > ios/App/App/GoogleService-Info.plist || \
            printf "%s" "$CONTENT" | base64 -d        > ios/App/App/GoogleService-Info.plist
          fi
          cp ios/App/App/GoogleService-Info.plist ios/App/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist || true

      - name: Capacitor sync iOS
        run: npx cap sync ios

      - name: Ensure CocoaPods install
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Verify Xcode workspace & scheme
        run: |
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme App | egrep "PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN|PROVISIONING_PROFILE_SPECIFIER" || true

      - name: Fastlane release
        working-directory: ios/App
        run: |
          set -e
          if [ -f Gemfile ]; then
            bundle exec fastlane release
          else
            fastlane release
          fi

      - name: Show xcodebuild logs (tail)
        if: always()
        run: |
          echo "== Gym logs in ~/Library/Logs/gym =="
          ls -la ~/Library/Logs/gym || true
          LOG=$(ls -t ~/Library/Logs/gym/*.log 2>/dev/null | head -n1 || true)
          [ -n "$LOG" ] && tail -n 400 "$LOG" || echo "No gym log found"
          echo "== Fastlane build_logs =="
          ls -la ios/App/fastlane/build_logs || true
          LAST=$(ls -t ios/App/fastlane/build_logs/*.log 2>/dev/null | head -n1 || true)
          [ -n "$LAST" ] && tail -n 200 "$LAST" || echo "No local fastlane log"

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            ~/Library/Logs/gym/**
            ios/App/fastlane/build_logs/**
          if-no-files-found: warn

      - name: Inspect built IPA (only on success)
        if: ${{ success() }}
        run: |
          set -euo pipefail
          candidates=(ios/App/build/*.ipa ios/App/*.ipa *.ipa)
          IPA=""
          for c in "${candidates[@]}"; do
            if [[ -f $c ]]; then
              echo "üì¶ Inspecting: $c"
              IPA="$c"
              break
            fi
          done
          [[ -z "$IPA" ]] && { echo "‚ùå No IPA found"; exit 1; }

          TMP=$(mktemp -d)
          unzip -q "$IPA" -d "$TMP"
          APP_PATH=$(/usr/bin/find "$TMP/Payload" -type d -name '*.app' -print -quit)
          [[ -z "$APP_PATH" ]] && { echo "‚ùå .app not found in IPA"; exit 1; }
          echo "üß© App bundle: $APP_PATH"

          echo "== Check GoogleService-Info.plist =="
          if [[ ! -f "$APP_PATH/GoogleService-Info.plist" ]]; then
            echo "‚ùå GoogleService-Info.plist is missing from .app"
            /usr/bin/find "$APP_PATH" -name GoogleService-Info.plist | sed 's/^/ - /'
            exit 1
          fi
          /usr/bin/plutil -lint "$APP_PATH/GoogleService-Info.plist" || true
          /usr/libexec/PlistBuddy -c "Print :BUNDLE_ID" "$APP_PATH/GoogleService-Info.plist" || true

          echo "== Check aps-environment (entitlements & provisioning) =="
          /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
          /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist
          /usr/bin/security cms -D -i "$APP_PATH/embedded.mobileprovision" > profile.plist
          /usr/libexec/PlistBuddy -c "Print :Entitlements:aps-environment" profile.plist

      - name: Upload IPA artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            ios/App/build/*.ipa
            **/App.dSYM.zip
          if-no-files-found: warn
