name: iOS Release (Capacitor + Fastlane)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Override BUILD_NUMBER (optional)"
        required: false
        default: "237"
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ios-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ios-build:
    runs-on: macos-15

    env:
      SCHEME_NAME: App
      APP_BUNDLE_ID: gr.formypet.app
      BUILD_NUMBER: ${{ inputs.build_number }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Start ssh-agent & add deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Trust github.com host
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa -H github.com >> ~/.ssh/known_hosts

      - name: Sanity check SSH access to MATCH_GIT_URL
        run: |
          set -euo pipefail
          [ -n "${MATCH_GIT_URL:-}" ] || { echo "❌ MATCH_GIT_URL is empty"; exit 1; }
          git ls-remote --heads "${MATCH_GIT_URL}" >/dev/null
          echo "✅ SSH access OK"

      # ========= Pick an Xcode that has iPhoneOS SDK =========
      - name: Select best available Xcode (auto)
        run: |
          set -euo pipefail
          CANDIDATES=(
            /Applications/Xcode_16.4.app
            /Applications/Xcode_16.3.app
            /Applications/Xcode_16.2.app
            /Applications/Xcode_16.1.app
            /Applications/Xcode_16.app
            /Applications/Xcode_15.4.app
          )
          PICK=""
          for X in "${CANDIDATES[@]}"; do
            if [ -d "$X" ] && compgen -G "$X/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS*.sdk" > /dev/null; then
              PICK="$X"; break
            fi
          done
          [ -n "$PICK" ] || { echo "❌ No Xcode with iPhoneOS SDK"; ls -la /Applications || true; exit 1; }
          echo "✅ Using Xcode: $PICK"
          sudo xcode-select -s "$PICK"
          echo "DEVELOPER_DIR=$PICK/Contents/Developer" >> "$GITHUB_ENV"
          sudo "$PICK/Contents/Developer/usr/bin/xcodebuild" -runFirstLaunch || true
          sudo xcodebuild -license accept || true
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version
          ls -la "$PICK/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs"

      # ========= Toolchains =========
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: false

      - name: Print tool versions
        run: |
          node -v
          npm -v
          ruby -v
          gem -v

      # ========= Web build =========
      - name: Setup .npmrc (if NPM_TOKEN)
        if: ${{ env.NPM_TOKEN != '' }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install JS deps
        run: npm ci

      - name: Build web assets
        run: npm run build

      # ========= CocoaPods / Capacitor =========
      - name: Prepare Ruby gems (ios/App)
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle lock --add-platform arm64-darwin-23 x86_64-darwin-23 ruby || true
            bundle config set path 'vendor/bundle'
            bundle install --jobs 4
            bundle exec pod --version
          else
            gem install cocoapods -N
            pod --version
          fi

      - name: Write GoogleService-Info.plist (from secret)
        if: ${{ env.GOOGLE_SERVICE_INFO_PLIST != '' }}
        run: |
          set -euo pipefail
          mkdir -p ios/App/App ios/App/App/App
          CONTENT="${GOOGLE_SERVICE_INFO_PLIST}"
          if echo "$CONTENT" | head -n1 | grep -Eqi '^\s*<\?xml|^\s*\{'; then
            printf "%s" "$CONTENT" > ios/App/App/GoogleService-Info.plist
          else
            printf "%s" "$CONTENT" | base64 --decode > ios/App/App/GoogleService-Info.plist || \
            printf "%s" "$CONTENT" | base64 -d        > ios/App/App/GoogleService-Info.plist
          fi
          cp ios/App/App/GoogleService-Info.plist ios/App/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist || true

      - name: Capacitor sync iOS
        run: npx cap sync ios

      - name: Ensure CocoaPods install
        working-directory: ios/App
        run: |
          set -euo pipefail
          pod repo update
          pod install --repo-update

      # ========= Κράτα τα Pods σε Automatic & χωρίς υπογραφή =========
      - name: Sanitize Pods signing (Automatic, no profiles, no identity)
        run: |
          set -euo pipefail
          PODS_PBX="ios/App/Pods/Pods.xcodeproj/project.pbxproj"
          if [ -f "$PODS_PBX" ]; then
            # Καθάρισε provisioning & identity
            /usr/bin/sed -i '' -E 's/PROVISIONING_PROFILE_SPECIFIER = [^;]+;/PROVISIONING_PROFILE_SPECIFIER = "";/g' "$PODS_PBX"
            /usr/bin/sed -i '' -E 's/PROVISIONING_PROFILE = [^;]+;/PROVISIONING_PROFILE = "";/g' "$PODS_PBX"
            /usr/bin/sed -i '' -E 's/CODE_SIGN_IDENTITY = [^;]+;/CODE_SIGN_IDENTITY = "";/g' "$PODS_PBX"
            # Βάλε Automatic, αλλά απενεργοποίησε signing για Pods
            /usr/bin/sed -i '' -E 's/CODE_SIGN_STYLE = Manual;/CODE_SIGN_STYLE = Automatic;/g' "$PODS_PBX"
            /usr/bin/sed -i '' -E 's/CODE_SIGNING_ALLOWED = YES;/CODE_SIGNING_ALLOWED = NO;/g' "$PODS_PBX"
            /usr/bin/sed -i '' -E 's/CODE_SIGNING_REQUIRED = YES;/CODE_SIGNING_REQUIRED = NO;/g' "$PODS_PBX"
            echo "✅ Pods signing sanitized."
          else
            echo "ℹ️ Pods project not found at $PODS_PBX (skipping)."
          fi

      # ========= Verify workspace & scheme =========
      - name: Verify workspace & scheme
        run: |
          set -euo pipefail
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme "${SCHEME_NAME}" -configuration Release -sdk iphoneos | egrep "PRODUCT_BUNDLE_IDENTIFIER|CODE_SIGN|SDKROOT" || true

      - name: Set BUILD_NUMBER env
        run: |
          if [ -n "${{ inputs.build_number }}" ]; then
            echo "BUILD_NUMBER=${{ inputs.build_number }}" >> "$GITHUB_ENV"
          else
            echo "BUILD_NUMBER=${GITHUB_RUN_NUMBER}" >> "$GITHUB_ENV"
          fi

      # ========= Fastlane =========
      - name: Fastlane release
        working-directory: ios/App
        env:
          DEVELOPER_DIR: ${{ env.DEVELOPER_DIR }}
        run: |
          set -e
          if [ -f Gemfile ]; then
            bundle exec fastlane release
          else
            fastlane release
          fi

      # ========= Diagnostics =========
      - name: Dump ultra-detailed Xcode logs
        if: failure()
        run: |
          set -euo pipefail

          echo "== gym raw log =="
          LOG=$(ls -t ~/Library/Logs/gym/*.log 2>/dev/null | head -n1 || true)
          if [ -n "$LOG" ]; then
            echo "gym log: $LOG"
            echo "---- first errors ----"
            grep -nE "error:|fatal error:|Provisioning|CodeSign|No Accounts|certificate" "$LOG" | head -n 80 || true
            echo "---- tail 300 lines ----"
            tail -n 300 "$LOG" || true
          else
            echo "No gym log found."
          fi

          echo
          echo "== xcresult issues =="
          XCR=$(ls -t ios/App/build/*.xcresult 2>/dev/null | head -n1 || true)
          if [ -n "$XCR" ]; then
            echo "xcresult: $XCR"
            /usr/bin/xcrun xcresulttool get --path "$XCR" --format json > ios/App/build/xcresult.json
            /usr/bin/xcrun xcresulttool get --path "$XCR" --format json | /usr/bin/python3 - <<'PY'
            import json,sys
            j=json.load(sys.stdin)
            actions=j.get('actions',[])
            for a in actions:
              rs=a.get('actionResult',{})
              issues=rs.get('issues',{})
              for key in ('errorSummaries','warningSummaries','testFailureSummaries'):
                for s in issues.get(key,[]):
                  msg=s.get('message','')
                  loc=s.get('documentLocationInCreatingWorkspace',{}).get('url','')
                  print(f"[{key.upper()}] {msg}")
                  if loc: print(f"  at {loc}")
            PY
          else
            echo "No xcresult bundle found."
          fi

          echo
          echo "== DerivedData build logs (first log + tail) =="
          DD=$(ls -t ~/Library/Developer/Xcode/DerivedData/*/Logs/Build/*.log 2>/dev/null | head -n1 || true)
          if [ -n "$DD" ]; then
            echo "DerivedData log: $DD"
            grep -nE "error:|fatal error:|Provisioning|CodeSign|No Accounts|certificate" "$DD" | head -n 80 || true
            echo "---- tail 200 ----"
            tail -n 200 "$DD" || true
          else
            echo "No DerivedData build logs found."
          fi

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcodebuild-logs
          path: |
            ~/Library/Logs/gym/**
            ios/App/fastlane/build_logs/**
            ios/App/build/xcresult.json
          if-no-files-found: warn

      - name: Upload xcresult bundle
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-xcresult
          path: ios/App/build/*.xcresult
          if-no-files-found: warn

      - name: Inspect built IPA (only on success)
        if: ${{ success() }}
        run: |
          set -euo pipefail
          IPA=$(ls -t ios/App/build/*.ipa 2>/dev/null | head -n1 || true)
          if [ -z "$IPA" ]; then
            echo "No IPA found"; exit 1
          fi
          TMP=$(mktemp -d)
          unzip -q "$IPA" -d "$TMP"
          APP_PATH=$(/usr/bin/find "$TMP/Payload" -type d -name '*.app' -print -quit)
          echo "🧩 App bundle: $APP_PATH"
          /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
          /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true

      - name: Upload IPA artifact
        if: ${{ success() }}
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa
          path: |
            ios/App/build/*.ipa
            **/App.dSYM.zip
          if-no-files-found: warn
