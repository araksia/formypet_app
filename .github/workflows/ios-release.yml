name: iOS Release (Capacitor + Fastlane)

on:
  workflow_dispatch:
    inputs:
      build_number:
        description: "Override BUILD_NUMBER (optional)"
        required: false
  push:
    branches: [ main ]

permissions:
  contents: read

concurrency:
  group: ios-release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  ios-build:
    runs-on: macos-14-large

    env:
      # ---- App / build ----
      APP_BUNDLE_ID: gr.formypet.app
      SCHEME_NAME: App
      BUILD_NUMBER: ${{ inputs.build_number || '323' }}

      # ---- fastlane match (git storage over SSH) ----
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_BRANCH: main
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}

      # ---- App Store Connect API (RAW .p8) ----
      APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
      APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
      APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

      # ---- Optional ----
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      GOOGLE_SERVICE_INFO_PLIST: ${{ secrets.GOOGLE_SERVICE_INFO_PLIST }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      # =========================
      # SSH Deploy Key for match
      # =========================
      - name: Start ssh-agent & add deploy key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Trust github.com host
        run: |
          set -euo pipefail
          mkdir -p ~/.ssh
          ssh-keyscan -t rsa,ecdsa -H github.com >> ~/.ssh/known_hosts

      - name: Sanity check SSH access to MATCH_GIT_URL
        run: |
          set -euo pipefail
          if [ -z "${MATCH_GIT_URL:-}" ]; then
            echo "‚ùå MATCH_GIT_URL is empty"; exit 1
          fi
          if [[ ! "${MATCH_GIT_URL}" =~ ^git@github\.com:.+\.git$ ]]; then
            echo "‚ùå MATCH_GIT_URL must be SSH form like git@github.com:owner/repo.git"
            echo "   Current: ${MATCH_GIT_URL}"
            exit 1
          fi
          echo "üîé Testing ssh access to ${MATCH_GIT_URL}..."
          git ls-remote --heads "${MATCH_GIT_URL}" >/dev/null
          echo "‚úÖ SSH access OK"

      # =========================
      # Toolchains
      # =========================
      - name: Clean Caches
        run: |
          npm cache clean --force
          rm -rf ios/App/Pods
          rm -rf ios/App/App.xcworkspace
    
      - name: Select Xcode 15.4
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '15.4'

      - name: Detect & export DEVELOPER_DIR
        run: |
          set -euo pipefail
          DEVELOPER_DIR="$(xcode-select -p)"
          echo "DEVELOPER_DIR=$DEVELOPER_DIR" >> "$GITHUB_ENV"
          echo "DEVELOPER_DIR=$DEVELOPER_DIR"
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version
          xcrun --sdk iphoneos --show-sdk-path

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3'
          bundler-cache: false

      - name: Print tool versions
        run: |
          node -v
          npm -v
          ruby -v
          gem -v

      # =========================
      # Web build
      # =========================
      - name: Setup .npmrc (if NPM_TOKEN)
        if: ${{ env.NPM_TOKEN && env.NPM_TOKEN != '' }}
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc

      - name: Install JS deps
        run: npm ci

      - name: Build web assets
        run: npm run build

      # =========================
      # CocoaPods / Capacitor
      # =========================
      - name: Prepare Ruby gems (ios/App)
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle lock --add-platform arm64-darwin-23 x86_64-darwin-23 ruby || true
            bundle config set path 'vendor/bundle'
            bundle install --jobs 4
            bundle exec pod --version
          else
            gem install cocoapods -N
            pod --version
          fi

      - name: Write GoogleService-Info.plist (if provided)
        if: ${{ env.GOOGLE_SERVICE_INFO_PLIST && env.GOOGLE_SERVICE_INFO_PLIST != '' }}
        run: |
          set -euo pipefail
          mkdir -p ios/App/App ios/App/App/App
          CONTENT="${GOOGLE_SERVICE_INFO_PLIST}"
          if echo "$CONTENT" | head -n1 | grep -Eqi '^\s*<\?xml|^\s*\{'; then
            printf "%s" "$CONTENT" > ios/App/App/GoogleService-Info.plist
          else
            printf "%s" "$CONTENT" | base64 --decode > ios/App/App/GoogleService-Info.plist || \
            printf "%s" "$CONTENT" | base64 -d        > ios/App/App/GoogleService-Info.plist
          fi
          cp ios/App/App/GoogleService-Info.plist ios/App/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist || true
      
      - name: Clean Old Pods and Caches
        working-directory: ios/App
        run: |
          echo "Removing Pods directory and Podfile.lock"
          rm -rf Pods
          rm -f Podfile.lock
      
      - name: Capacitor sync iOS
        run: npx cap sync ios

      - name: Ensure CocoaPods install
        working-directory: ios/App
        run: |
          set -euo pipefail
          if [ -f Gemfile ]; then
            bundle exec pod install --repo-update
          else
            pod install --repo-update
          fi

      - name: Verify workspace & scheme
        run: |
          set -euo pipefail
          xcodebuild -list -workspace ios/App/App.xcworkspace
          xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme "${SCHEME_NAME}" \
            -configuration Release -sdk iphoneos 2>/dev/null | \
            egrep "PRODUCT_BUNDLE_IDENTIFIER =|CODE_SIGN|PROVISIONING_PROFILE|SDKROOT =" || true

      # =========================
      # Diagnostics (compile-only)
      # =========================
      - name: Dry-run build (compile only, no signing)
        run: |
          set -euo pipefail
          echo "== DRY RUN: compile without code signing =="
          xcodebuild -workspace ios/App/App.xcworkspace \
            -scheme "${SCHEME_NAME}" \
            -configuration Release \
            -sdk iphoneos \
            -destination 'generic/platform=iOS' \
            CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
            ONLY_ACTIVE_ARCH=NO ENABLE_USER_SCRIPT_SANDBOXING=NO \
            build | tee dryrun.log
          echo "== First errors (dry run) =="
          grep -nE " error: |fatal error:|Undefined symbols|ld: |Command CompileSwift failed|Command Ld failed" dryrun.log | head -n 80 || true

      # =========================
      # Fastlane
      # =========================
      - name: Fastlane release
        working-directory: ios/App
        env:
          DEVELOPER_DIR: ${{ env.DEVELOPER_DIR }}
        run: |
          set -e
          if [ -f Gemfile ]; then
            bundle exec fastlane release
          else
            fastlane release
          fi

      # =========================
      # Logs & artifacts
      # =========================
      - name: Dump XCResult compiler errors (on failure)
        if: failure()
        run: |
          set -euo pipefail
          # ŒíœÅŒµœÇ œÑŒø œÄŒπŒø œÄœÅœåœÉœÜŒ±œÑŒø .xcresult (Œ±œÄœå gym ŒÆ Œ±œÄœå Archives)
          BUNDLE="$(ls -t ios/App/build/*.xcresult 2>/dev/null | head -n1 || true)"
          if [ -z "${BUNDLE}" ]; then
            BUNDLE="$(ls -t ~/Library/Developer/Xcode/Archives/*/*.xcresult 2>/dev/null | head -n1 || true)"
          fi

          if [ -z "${BUNDLE}" ]; then
            echo "‚ùå No .xcresult bundle found."; exit 0
          fi

          echo "üì¶ Using xcresult: ${BUNDLE}"
          # ŒöŒ¨ŒΩŒµ human-readable dump
          xcrun xcresulttool formatDescription \
            -resultBundlePath "${BUNDLE}" \
            -outputPath xcresult.txt \
            -format txt

          echo "== First 200 compiler errors/warnings =="
          grep -nE " error: |fatal error:|Undefined symbol|Command CompileSwift failed|Command Ld failed|non-modular|No such module|Cannot find type|cannot find '.*' in scope" xcresult.txt | head -n 200 || true

          echo
          echo "== Tail of xcresult (last 400 lines) =="
          tail -n 400 xcresult.txt || true

      - name: Upload artifacts (logs, result bundles, IPAs)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: |
            dryrun.log
            ~/Library/Logs/gym/**
            ios/App/fastlane/logs/**
            ios/App/build/*.ipa
            **/*.xcresult
          if-no-files-found: warn
