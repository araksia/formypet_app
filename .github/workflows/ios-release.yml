name: Build and Release iOS

on:
  workflow_dispatch:
  push:
    tags:
      - 'ios-v*'

jobs:
  ios:
    runs-on: macos-14
    defaults:
      run:
        shell: bash
    env:
      BUNDLE_PATH: vendor/bundle
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}          # << ŒïŒîŒ© œÉœÑŒø job
      APP_BUNDLE_ID: gr.formypet.app   # üëà ŒµŒ¥œé

    steps:
      # 1) Checkout
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2) ŒïœÄŒπŒªŒøŒ≥ŒÆ Xcode
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.*'   # ŒÆ 16.1 / 16.2 Œ∫.ŒªœÄ.
      
      - name: Show selected Xcode / SDK
        run: |
          xcodebuild -version
          xcrun --sdk iphoneos --show-sdk-version

      # 3) Ruby & Bundler
      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      - name: Install gems
        working-directory: ios/App
        run: |
          bundle install --jobs 4 --retry 3
          
      # Node.js Œ≥ŒπŒ± Capacitor/JS
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'   # ŒµŒæŒ±ŒΩŒ±Œ≥Œ∫Œ¨Œ∂ŒµŒπ npmjs
          cache: 'npm'    
          
      - name: Install JS dependencies
        run: |
          if [ -f package-lock.json ]; then
            npm ci
          elif [ -f yarn.lock ]; then
            corepack enable
            yarn install --frozen-lockfile
          else
            npm install
          fi

      - name: Build web assets (create ./dist)
        run: npm run build
          
      # Œ£œÖŒ≥œáœÅŒøŒΩŒπœÉŒºœåœÇ Capacitor -> iOS (œáœâœÅŒØœÇ pod install ŒµŒ¥œé)
      - name: Sync Capacitor iOS (skip pods)
        env:
          CAPACITOR_SKIP_POD_INSTALL: '1'
        run: npx cap sync ios
        
      - name: Ensure xcodeproj gem
        run: gem install xcodeproj -N


      # --- Œ≥œÅŒ¨œÜŒøœÖŒºŒµ œÑŒø GoogleService-Info.plist Œ±œÄœå secret ---
      - name: Write GoogleService-Info.plist
        run: |
          mkdir -p ios/App/App
          echo "$FIREBASE_IOS_PLIST_BASE64" | base64 --decode > ios/App/App/GoogleService-Info.plist
          /usr/bin/plutil -lint ios/App/App/GoogleService-Info.plist
        env:
          FIREBASE_IOS_PLIST_BASE64: ${{ secrets.FIREBASE_IOS_PLIST_BASE64 }}

      # --- œÄœÅŒøœÉŒ∏ŒÆŒ∫Œ∑ œÉœÑŒø target Resources (œáœâœÅŒØœÇ ŒΩŒ± Œ±ŒΩŒøŒØŒæŒµŒπœÇ Xcode) ---
      - name: Add plist to Xcode target (if missing)
        working-directory: ios/App
        run: |
          ruby -e "require 'xcodeproj';
          p='App.xcodeproj';
          proj=Xcodeproj::Project.open(p);
          t=proj.targets.find{|t| t.name=='App'} or abort('No target App');
          path='App/GoogleService-Info.plist';
          ref=proj.main_group.find_file_by_path(path) || proj.main_group.new_file(path);
          unless t.resources_build_phase.files_references.include?(ref)
            t.add_resources([ref]); puts 'Added GoogleService-Info.plist to Resources';
          end
          proj.save"
      
      

      # 4) CocoaPods
      - name: Install CocoaPods
        working-directory: ios/App
        run: |
          if bundle exec pod --version >/dev/null 2>&1; then
            echo "Using CocoaPods from Gemfile"
          else
            gem install cocoapods -N
          fi
          pod repo update
          bundle exec pod install --repo-update || pod install --repo-update

      # 5) ŒëŒΩ Œ¥ŒµŒΩ œÖœÄŒ¨œÅœáŒµŒπ shared scheme, Œ±ŒΩœÑŒπŒ≥œÅŒ¨œÜŒøœÖŒºŒµ œÄŒπŒ∏Œ±ŒΩœå user scheme œÉŒµ shared
      - name: Ensure shared scheme exists
        working-directory: ios/App
        run: |
          set -euo pipefail
          PROJ="App.xcodeproj"
          SHARE="$PROJ/xcshareddata/xcschemes"
          USERDIR=$(ls -1d "$PROJ"/xcuserdata/* 2>/dev/null | head -n1 || true)
          if [ -n "$USERDIR" ] && [ -d "$USERDIR/xcschemes" ]; then
            mkdir -p "$SHARE"
            cp "$USERDIR/xcschemes/"*.xcscheme "$SHARE"/ || true
            echo "Copied user schemes to shared."
          else
            echo "No user schemes to copy (if archive fails, share the 'App' scheme locally and commit)."
          fi

      # 6) ŒìœÅŒÆŒ≥ŒøœÅŒøœÇ Œ≠ŒªŒµŒ≥œáŒøœÇ (Œ¥ŒµŒΩ ŒºœÄŒªŒøŒ∫Œ¨œÅŒµŒπ)
      - name: Sanity check workspace & signing
        run: |
          ls -la ios/App
          /usr/bin/xcodebuild -list -workspace ios/App/App.xcworkspace || true
          /usr/bin/xcodebuild -showBuildSettings \
            -workspace ios/App/App.xcworkspace \
            -scheme App | egrep 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|IPHONEOS_DEPLOYMENT_TARGET' || true

      # 7) SSH Œ≥ŒπŒ± œÑŒø match repo (deploy key)
      - name: Start ssh-agent (for match repo)
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}

      - name: Add github.com to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Configure Git for match
        run: |
          git config --global user.email "ci@github.actions"
          git config --global user.name "GitHub Actions"

      # (œÄœÅŒøŒ±ŒπœÅŒµœÑŒπŒ∫œå) ŒàŒªŒµŒ≥œáŒøœÇ œÄœÅœåœÉŒ≤Œ±œÉŒ∑œÇ œÉœÑŒø certs repo
      - name: Check access to match repo
        env:
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
        run: git ls-remote "$MATCH_GIT_URL" -h
        
      - name: Upload Xcode logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: xcode-logs
          path: ~/Library/Logs/gym/*
          
      - name: Show Xcode schemes and build settings
        run: |
        xcodebuild -list -workspace ios/App/App.xcworkspace
        xcodebuild -showBuildSettings -workspace ios/App/App.xcworkspace -scheme App -configuration Release | egrep 'PRODUCT_BUNDLE_IDENTIFIER|DEVELOPMENT_TEAM|CODE_SIGN_STYLE|PROVISIONING_PROFILE_SPECIFIER|SWIFT_VERSION|IPHONEOS_DEPLOYMENT_TARGET'


      # 8) Build & Release ŒºŒ≠œÉœâ fastlane (lane: ios release)
      - name: Build & Release with fastlane
        working-directory: ios/App
        env:
          # match (SSH + branch main)
          MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}       # œÄ.œá. git@github.com:araksia/formypet-ios-certificates.git
          MATCH_GIT_BRANCH: main
          MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}   # <‚Äî
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }} 
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}   # <‚Äî ŒùŒïŒü


          # App Store Connect API key (œÑŒø .p8 œÄŒµœÅŒπŒµœáœåŒºŒµŒΩŒø œÉŒµ Œ±œÖœÑœå œÑŒø secret)
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

          # Team & bundle id œÄŒøœÖ Œ¥ŒπŒ±Œ≤Œ¨Œ∂ŒµŒπ Œø Fastfile
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_ID: ${{ secrets.APPLE_APP_ID }}
          BUILD_NUMBER: ${{ github.run_number }}   # <-- œÄœÅŒøœÉŒ∏ŒÆŒ∫Œ∑
        run: bundle exec fastlane release
