require 'shellwords'

# =========================
# Helpers
# =========================

def read_build_settings(scheme:, configuration:)
  cmd1 = %W[
    xcodebuild -showBuildSettings
    -workspace App.xcworkspace
    -scheme #{scheme}
    -configuration #{configuration}
    -sdk iphoneos
  ].map(&:shellescape).join(" ")
  out = Actions.sh(cmd1, log: false) rescue ""

  if out.to_s.strip.empty? || !out.include?("Build settings")
    cmd2 = %W[
      xcodebuild -showBuildSettings
      -project App.xcodeproj
      -target #{scheme}
      -configuration #{configuration}
      -sdk iphoneos
    ].map(&:shellescape).join(" ")
    out = Actions.sh(cmd2, log: false) rescue ""
  end

  out
end

# Εντόπισε αν υπάρχει φυσικό Info.plist ή αν το Xcode το παράγει (GENERATE_INFOPLIST_FILE=YES)
def resolve_infoplist_path_and_mode(scheme:, configuration:)
  out = read_build_settings(scheme: scheme, configuration: configuration)
  return [nil, :unknown] if out.to_s.strip.empty?

  inf = out.lines.grep(/^\s*INFOPLIST_FILE\s*=/).last&.split("=",2)&.last&.strip
  generated = out.lines.grep(/^\s*GENERATE_INFOPLIST_FILE\s*=\s*YES/i).any?
  base = out.lines.grep(/^\s*(SRCROOT|PROJECT_DIR)\s*=/).last&.split("=",2)&.last&.strip || Dir.pwd

  if generated && (inf.nil? || inf.empty?)
    return [nil, :generated]
  end

  return [nil, :unknown] if inf.to_s.empty?

  expanded = inf.dup
  { "SRCROOT" => base, "PROJECT_DIR" => base }.each do |k,v|
    expanded.gsub!("$(#{k})", v)
    expanded.gsub!(/\$\{#{k}\}/, v)
  end

  abs = File.expand_path(expanded, base)
  File.exist?(abs) ? [abs, :file] : [nil, :unknown]
end

# Τελευταίο καταφύγιο: βρες Info.plist που να έχει CFBundleIdentifier == APP_BUNDLE_ID
def find_plist_by_bundle_id(root:, bundle_id:)
  Dir.glob(File.join(root, "**/Info.plist")).find do |p|
    id = `/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" "#{p}" 2>/dev/null`.strip
    id == bundle_id
  end
end

# =========================
# Fastlane
# =========================

default_platform :ios

platform :ios do
  desc "Build & upload to TestFlight"
  lane :release do
    # 1) Keychain για CI
    create_keychain(
      name: "ci",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 2) App Store Connect API key (RAW .p8)
    api_key = app_store_connect_api_key(
      key_id:      ENV.fetch('APP_STORE_CONNECT_API_KEY_ID'),
      issuer_id:   ENV.fetch('APP_STORE_CONNECT_API_ISSUER_ID'),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT')
    )

    # 3) match (certs & profiles από git μέσω SSH)
    match(
      type: "appstore",
      readonly: true,
      storage_mode: "git",
      git_url: ENV.fetch('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || 'main'),
      app_identifier: ENV.fetch('APP_BUNDLE_ID'),
      team_id: ENV.fetch('APPLE_TEAM_ID'),
      keychain_name: "ci",
      keychain_password: ENV.fetch('MATCH_KEYCHAIN_PASSWORD'),
      api_key: api_key
    )

    # 4) Build number (AGV ή fallback)
    scheme = (ENV['SCHEME_NAME'] || "App")
    config = "Release"

    # ανθεκτική επιλογή build number
    bn = ENV['BUILD_NUMBER'].to_s.strip
    bn = ENV['GITHUB_RUN_NUMBER'].to_s.strip if bn.empty?
    bn = ENV['GITHUB_RUN_ATTEMPT'].to_s.strip if bn.empty?
    bn = Time.now.strftime('%Y%m%d%H%M') if bn.empty?
    UI.message("Using BUILD_NUMBER=#{bn}")

    agv_ok = false
    begin
      increment_build_number(build_number: bn) # AGV / CURRENT_PROJECT_VERSION
      agv_ok = true
    rescue => e
      UI.important("AGV (increment_build_number) failed: #{e}")
    end

    extra_version_xcargs = ""
    unless agv_ok
      plist_path, mode = resolve_infoplist_path_and_mode(scheme: scheme, configuration: config)
      case mode
      when :file
        UI.message("Using Info.plist at: #{plist_path}")
        set_info_plist_value(path: plist_path, key: "CFBundleVersion", value: bn)
      when :generated
        UI.important("GENERATE_INFOPLIST_FILE=YES (no physical Info.plist). Will override CFBundleVersion via xcodebuild.")
        extra_version_xcargs = " CURRENT_PROJECT_VERSION=#{bn}"
      else
        guessed = find_plist_by_bundle_id(root: ".", bundle_id: ENV.fetch('APP_BUNDLE_ID'))
        if guessed && File.exist?(guessed)
          UI.message("Found Info.plist by bundle id at: #{guessed}")
          set_info_plist_value(path: guessed, key: "CFBundleVersion", value: bn)
        else
          UI.important("Couldn't resolve a physical Info.plist. Will override CFBundleVersion via xcodebuild.")
          extra_version_xcargs = " CURRENT_PROJECT_VERSION=#{bn}"
        end
      end
    end

    

    # 6) Gym (Archive) — Automatic signing + πιθανό override του CURRENT_PROJECT_VERSION
    signing_args = [
      "-allowProvisioningUpdates",
      "CODE_SIGN_STYLE=Automatic",
      "DEVELOPMENT_TEAM=#{ENV.fetch('APPLE_TEAM_ID')}",
      "ONLY_ACTIVE_ARCH=NO",
      "ENABLE_USER_SCRIPT_SANDBOXING=NO"
    ].join(" ")

    gym(
      workspace: "App.xcworkspace",
      scheme: scheme,
      configuration: config,
      clean: true,
      sdk: "iphoneos",
      export_method: "app-store",
      output_directory: "build",
      output_name: "App-#{Time.now.strftime('%Y%m%d')}.ipa",
      include_symbols: true,
      include_bitcode: false,
      result_bundle: true,
      xcargs: [signing_args, extra_version_xcargs].join(" "),
      export_options: {
        signingStyle: "automatic"
      },
      silent: false
    )

    # 7) Safety check (προαιρετικό)
    sh <<~BASH
      set -e
      IPA=$(ls -t build/*.ipa | head -n1)
      TMP=$(mktemp -d); unzip -q "$IPA" -d "$TMP"
      APP_PATH=$(find "$TMP/Payload" -name "*.app" -maxdepth 1 | head -n1)
      /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
      /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true
    BASH

    # 8) Upload στο TestFlight
    pilot(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end
