require 'shellwords'

# Βοηθητικό: βρες και κάνε expand το πραγματικό Info.plist από τα build settings
def resolve_infoplist_path(scheme:, configuration:)
  # Τρέχουμε μέσα στον φάκελο ios/App (εκεί καλούμε τη lane)
  cmd = [
    "xcodebuild",
    "-showBuildSettings",
    "-workspace", "App.xcworkspace",
    "-scheme", scheme.to_s,
    "-configuration", configuration.to_s
  ].map(&:shellescape).join(" ")

  out = Actions.sh(cmd, log: false) rescue ""
  inf = out.lines.grep(/^\s*INFOPLIST_FILE\s*=/).last&.split("=", 2)&.last&.strip
  src = out.lines.grep(/^\s*SRCROOT\s*=/).last&.split("=", 2)&.last&.strip
  projdir = out.lines.grep(/^\s*PROJECT_DIR\s*=/).last&.split("=", 2)&.last&.strip

  return nil if inf.nil? || inf.empty?

  base = src || projdir || Dir.pwd
  vars = {
    "SRCROOT"     => base,
    "PROJECT_DIR" => base,
    "TARGET_NAME" => scheme.to_s,
    "PRODUCT_NAME"=> scheme.to_s
  }

  # Κάνε expand $(VAR) και ${VAR}
  expanded = inf.dup
  vars.each do |k, v|
    expanded.gsub!("$(#{k})", v)
    expanded.gsub!(/\$\{#{k}\}/, v)
  end

  # Αν παραμείνουν σχετικές διαδρομές, κάν’ τες absolute με βάση το PROJECT_DIR/SRCROOT
  abs = File.expand_path(expanded, base)

  # Μικρή βοήθεια: αν δεν υπάρχει ακόμα, δοκίμασε και σε σχέση με τον τρέχοντα φάκελο
  return abs if File.exist?(abs)
  alt = File.expand_path(expanded, Dir.pwd)
  return alt if File.exist?(alt)

  nil
end

default_platform :ios

platform :ios do
  desc "Build & upload to TestFlight"
  lane :release do
    # 1) Keychain για CI
    create_keychain(
      name: "ci",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 2) App Store Connect API key (RAW .p8)
    api_key = app_store_connect_api_key(
      key_id:      ENV.fetch('APP_STORE_CONNECT_API_KEY_ID'),
      issuer_id:   ENV.fetch('APP_STORE_CONNECT_API_ISSUER_ID'),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT')
    )

    # 3) match (certs & profiles από git μέσω SSH)
    match(
      type: "appstore",
      readonly: true,
      storage_mode: "git",
      git_url: ENV.fetch('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || 'main'),
      app_identifier: ENV.fetch('APP_BUNDLE_ID'),
      team_id: ENV.fetch('APPLE_TEAM_ID'),
      keychain_name: "ci",
      keychain_password: ENV.fetch('MATCH_KEYCHAIN_PASSWORD'),
      api_key: api_key
    )

    # 4) Build number (AGV αν υπάρχει, αλλιώς γράφουμε στο αληθινό Info.plist που δηλώνει το target)
    scheme = (ENV['SCHEME_NAME'] || "App")
    config = "Release"

    begin
      bn = ENV['BUILD_NUMBER'].to_s.strip
      UI.user_error!("BUILD_NUMBER env is empty") if bn.empty?
      increment_build_number(build_number: bn) # agvtool / CURRENT_PROJECT_VERSION
    rescue => e
      UI.important("AGV/`increment_build_number` failed: #{e}")
      UI.message("Falling back to Info.plist from build settings (scheme=#{scheme}, config=#{config})")

      plist_path = resolve_infoplist_path(scheme: scheme, configuration: config)
      unless plist_path && File.exist?(plist_path)
        UI.user_error!("Couldn't locate Info.plist from build settings for scheme='#{scheme}', config='#{config}'.")
      end

      UI.message("Using Info.plist at: #{plist_path}")
      set_info_plist_value(
        path: plist_path,
        key: "CFBundleVersion",
        value: ENV['BUILD_NUMBER']
      )
    end

    # 5) Pin Xcode 16.2
    xcode_select("/Applications/Xcode_16.2.app")

    # 6) Gym (Archive) με ρητά signing flags για ΟΛΑ τα targets
    signing_args = [
      "-allowProvisioningUpdates",
      "CODE_SIGN_STYLE=Manual",
      "DEVELOPMENT_TEAM=#{ENV.fetch('APPLE_TEAM_ID')}",
      "PROVISIONING_PROFILE_SPECIFIER=match AppStore #{ENV.fetch('APP_BUNDLE_ID')}",
      "CODE_SIGN_IDENTITY=Apple Distribution",
      "ONLY_ACTIVE_ARCH=NO",
      "ENABLE_USER_SCRIPT_SANDBOXING=NO"
    ].join(" ")

    gym(
      workspace: "App.xcworkspace",
      scheme: scheme,
      configuration: config,
      clean: true,
      sdk: "iphoneos",
      export_method: "app-store",
      output_directory: "build",
      output_name: "App-#{Time.now.strftime('%Y%m%d')}.ipa",
      include_symbols: true,
      include_bitcode: false,
      result_bundle: true,
      xcargs: signing_args,
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          ENV.fetch('APP_BUNDLE_ID') => "match AppStore #{ENV.fetch('APP_BUNDLE_ID')}"
        }
      },
      silent: false
    )

    # 7) Safety check (προαιρετικό)
    sh <<~BASH
      set -e
      IPA=$(ls -t build/*.ipa | head -n1)
      TMP=$(mktemp -d); unzip -q "$IPA" -d "$TMP"
      APP_PATH=$(find "$TMP/Payload" -name "*.app" -maxdepth 1 | head -n1)
      /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
      /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true
    BASH

    # 8) Upload στο TestFlight (χωρίς submit)
    pilot(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end
