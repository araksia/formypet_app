# ios/App/Fastfile

default_platform :ios

platform :ios do
  desc "Build & upload to TestFlight (Capacitor pods unsigned; App target manual Distribution via profile UUID)"
  lane :release do
    # 1) CI keychain
    create_keychain(
      name: "ci",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 2) App Store Connect API key
    api_key = app_store_connect_api_key(
      key_id:      ENV.fetch('APP_STORE_CONNECT_API_KEY_ID'),
      issuer_id:   ENV.fetch('APP_STORE_CONNECT_API_ISSUER_ID'),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT')
    )

    # 3) match (App Store distribution)
    match(
      type: "appstore",
      readonly: true,
      storage_mode: "git",
      git_url: ENV.fetch('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || 'main'),
      app_identifier: ENV.fetch('APP_BUNDLE_ID'),
      team_id: ENV.fetch('APPLE_TEAM_ID'),
      keychain_name: "ci",
      keychain_password: ENV.fetch('MATCH_KEYCHAIN_PASSWORD'),
      api_key: api_key
    )

    # 4) Build number (προαιρετικό)
    bn = (ENV['BUILD_NUMBER'] || "").strip
    if bn.empty?
      UI.important("BUILD_NUMBER is empty; skipping increment_build_number")
    else
      increment_build_number(build_number: bn)
    end

    # 5) Info
    sh("xcodebuild -version || true")
    sh("xcrun --sdk iphoneos --show-sdk-version || true")

    # 6) Workspace/Scheme
    scheme    = (ENV['SCHEME_NAME'] || 'App')
    workspace = "App.xcworkspace"
    bundle_id = ENV.fetch('APP_BUNDLE_ID')
    team_id   = ENV.fetch('APPLE_TEAM_ID')

    # 7) Βρες το UUID του προφίλ
    profile_name = "match AppStore #{bundle_id}"
    profile_uuid = nil
    Dir["#{Dir.home}/Library/MobileDevice/Provisioning Profiles/*.mobileprovision"]
      .sort_by { |f| File.mtime(f) }
      .reverse_each do |f|
        begin
          sh("/usr/bin/security cms -D -i \"#{f}\" > prof.plist")
          name = sh("/usr/libexec/PlistBuddy -c \"Print :Name\" prof.plist").to_s.strip rescue ""
          appid = sh("/usr/libexec/PlistBuddy -c \"Print :Entitlements:application-identifier\" prof.plist").to_s.strip rescue ""
          uuid = sh("/usr/libexec/PlistBuddy -c \"Print :UUID\" prof.plist").to_s.strip rescue ""
          if name == profile_name && appid.end_with?(".#{bundle_id}")
            profile_uuid = uuid
            UI.message("Using provisioning profile: #{name} (UUID=#{uuid})")
            break
          end
        rescue => e
          UI.important("Profile parse error: #{e}")
        end
      end
    UI.user_error!("Could not find UUID for provisioning profile '#{profile_name}'") unless profile_uuid && !profile_uuid.empty?

    # 8) Βεβαιώσου ότι το keychain είναι ξεκλείδωτο ΠΡΙΝ το build
    UI.header("Ensuring Keychain is Unlocked")
    unlock_keychain(
      path: File.expand_path("~/Library/Keychains/ci-db"),
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 9) QUOTED xcargs
    xargs = [
      'CODE_SIGN_STYLE=Manual',
      "DEVELOPMENT_TEAM=#{team_id}",
      "PROVISIONING_PROFILE=#{profile_uuid}",
      %Q(CODE_SIGN_IDENTITY="Apple Distribution"),
      'ONLY_ACTIVE_ARCH=NO',
      'ENABLE_USER_SCRIPT_SANDBOXING=NO',
      
      # --- ΠΡΟΣΘΕΣΕ ΞΑΝΑ ΑΥΤΗ ΤΗ ΓΡΑΜΜΗ ΕΔΩ ---
      # Αυτό θα επηρεάσει το κυρίως App target
      'SWIFT_COMPILATION_MODE=incremental'
      # -----------------------------------------

    ].join(' ')

    # 10) Export options
    export_opts = {
      method: "app-store",
      signingStyle: "manual",
      provisioningProfiles: {
        bundle_id => profile_name
      },
      compileBitcode: false,
      uploadBitcode: false,
      manageAppVersionAndBuildNumber: false
    }

    # 11) Archive & Export
    gym(
      workspace: workspace,
      scheme: scheme,
      configuration: "Release",
      clean: true,
      destination: "generic/platform=iOS",
      export_method: "app-store",
      export_options: export_opts,
      output_directory: "build",
      output_name: "App-#{Time.now.strftime('%Y%m%d')}",
      include_symbols: true,
      include_bitcode: false,
      xcargs: xargs,
      skip_profile_detection: true,
      silent: false,
      xcodebuild_formatter: "",
      buildlog_path: "./fastlane/logs",
      xcodebuild_command: "xcodebuild -jobs 2"
    )

    # 12) Entitlements sanity
    sh <<~BASH
      set -e
      IPA=$(ls -t build/*.ipa | head -n1)
      echo "Inspecting $IPA"
      TMP=$(mktemp -d); unzip -q "$IPA" -d "$TMP"
      APP_PATH=$(find "$TMP/Payload" -name "*.app" -maxdepth 1 | head -n1)
      /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
      /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true
    BASH

    # 13) Upload TestFlight
    pilot(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end
