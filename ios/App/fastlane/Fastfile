default_platform :ios

platform :ios do
  desc "Build & upload to TestFlight (Capacitor, Pods unsigned; App target manual Distribution)"
  lane :release do
    # 1) CI keychain
    create_keychain(
      name: "ci",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 2) App Store Connect API key
    api_key = app_store_connect_api_key(
      key_id:      ENV.fetch('APP_STORE_CONNECT_API_KEY_ID'),
      issuer_id:   ENV.fetch('APP_STORE_CONNECT_API_ISSUER_ID'),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT')
    )

    # 3) match (App Store distribution)
    match(
      type: "appstore",
      readonly: true,
      storage_mode: "git",
      git_url: ENV.fetch('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || 'main'),
      app_identifier: ENV.fetch('APP_BUNDLE_ID'),
      team_id: ENV.fetch('APPLE_TEAM_ID'),
      keychain_name: "ci",
      keychain_password: ENV.fetch('MATCH_KEYCHAIN_PASSWORD'),
      api_key: api_key
    )

    # 4) Build number
    bn = (ENV['BUILD_NUMBER'] || "").strip
    if bn.empty?
      UI.important("BUILD_NUMBER is empty; skipping increment_build_number")
    else
      increment_build_number(build_number: bn)
    end

    # 5) Info/Lint (προαιρετικά – βοηθά στο diagnose)
    sh("xcodebuild -version || true")
    sh("xcrun --sdk iphoneos --show-sdk-version || true")

    # 6) Targeting workspace/scheme
    scheme    = (ENV['SCHEME_NAME'] || 'App')
    workspace = "App.xcworkspace"

    # 7) Manual Distribution signing ΜΟΝΟ για το App target μέσω xcargs
    #    - Δεν πειράζουμε Pods (τις έχουμε κάνει unsigned στο YAML)
    #    - Απενεργοποιούμε το Automatic για το App και δίνουμε ρητά Distribution προφίλ/identity
    xargs = [
      "CODE_SIGN_STYLE=Manual",
      "DEVELOPMENT_TEAM=#{ENV['APPLE_TEAM_ID']}",
      "PROVISIONING_PROFILE_SPECIFIER=match AppStore #{ENV['APP_BUNDLE_ID']}",
      "CODE_SIGN_IDENTITY=Apple Distribution",
      "ONLY_ACTIVE_ARCH=NO",
      "ENABLE_USER_SCRIPT_SANDBOXING=NO"
    ].join(" ")

    # 8) Export options: manual + explicit provisioningProfiles mapping
    export_opts = {
      method: "app-store",
      signingStyle: "manual",
      provisioningProfiles: {
        ENV['APP_BUNDLE_ID'] => "match AppStore #{ENV['APP_BUNDLE_ID']}"
      },
      compileBitcode: false,
      uploadBitcode: false,
      manageAppVersionAndBuildNumber: false
    }

    # 9) Archive & Export με gym
    gym(
      workspace: workspace,
      scheme: scheme,
      configuration: "Release",
      clean: true,
      destination: "generic/platform=iOS",
      export_method: "app-store",
      export_options: export_opts,
      output_directory: "build",
      output_name: "App-#{Time.now.strftime('%Y%m%d')}.ipa",
      include_symbols: true,
      include_bitcode: false,
      xcargs: xargs,
      silent: false
    )

    # 10) Safety check (προαιρετικό)
    sh <<~BASH
      set -e
      IPA=$(ls -t build/*.ipa | head -n1)
      echo "Inspecting $IPA"
      TMP=$(mktemp -d); unzip -q "$IPA" -d "$TMP"
      APP_PATH=$(find "$TMP/Payload" -name "*.app" -maxdepth 1 | head -n1)
      /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
      /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true
    BASH

    # 11) Upload TestFlight
    pilot(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end
