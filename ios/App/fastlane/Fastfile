default_platform :ios

platform :ios do
  desc "Build & upload to TestFlight"
  lane :release do
    # 1) Keychain για CI
    create_keychain(
      name: "ci",
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      password: ENV["KEYCHAIN_PASSWORD"]
    )

    # 2) App Store Connect API key (RAW .p8)
    api_key = app_store_connect_api_key(
      key_id:      ENV.fetch('APP_STORE_CONNECT_API_KEY_ID'),
      issuer_id:   ENV.fetch('APP_STORE_CONNECT_API_ISSUER_ID'),
      key_content: ENV.fetch('APP_STORE_CONNECT_API_KEY_CONTENT')
    )

    # 3) match (certs & profiles από git μέσω SSH)
    match(
      type: "appstore",
      readonly: true,
      storage_mode: "git",
      git_url: ENV.fetch('MATCH_GIT_URL'),
      git_branch: (ENV['MATCH_GIT_BRANCH'] || 'main'),
      app_identifier: ENV.fetch('APP_BUNDLE_ID'),
      team_id: ENV.fetch('APPLE_TEAM_ID'),
      keychain_name: "ci",
      keychain_password: ENV.fetch('MATCH_KEYCHAIN_PASSWORD'),
      api_key: api_key
    )

    # 4) Build number (AGV αν υπάρχει, αλλιώς fallback σε υπαρκτό Info.plist)
    begin
      bn = ENV['BUILD_NUMBER'].to_s.strip
      UI.user_error!("BUILD_NUMBER env is empty") if bn.empty?
      increment_build_number(build_number: bn) # agvtool / CURRENT_PROJECT_VERSION
    rescue => e
      UI.important("agvtool failed (Apple Generic Versioning not enabled). Fallback to Info.plist: #{e}")

      # Σχετικά με το ios/App (τρέχεις εδώ το fastlane)
      candidates = [
        "App/Info.plist",            # Capacitor default
        "App/App/Info.plist",        # εναλλακτικό αν υπάρχει
        "App/Supporting/Info.plist", # άλλα κοινά paths
        "App/Resources/Info.plist",
        "App/Config/Info.plist"
      ]
      plist_path = candidates.find { |p| File.exist?(p) }
      UI.user_error!("Couldn't find Info.plist. Tried: #{candidates.join(', ')}") unless plist_path

      UI.message("Using Info.plist at: #{plist_path}")
      set_info_plist_value(
        path: plist_path,
        key: "CFBundleVersion",
        value: ENV['BUILD_NUMBER']
      )
    end

    # 5) Pin Xcode 16.2
    xcode_select("/Applications/Xcode_16.2.app")

    # 6) Gym (Archive) με ρητά signing flags για ΟΛΑ τα targets
    signing_args = [
      "-allowProvisioningUpdates",
      "CODE_SIGN_STYLE=Manual",
      "DEVELOPMENT_TEAM=#{ENV.fetch('APPLE_TEAM_ID')}",
      "PROVISIONING_PROFILE_SPECIFIER=match AppStore #{ENV.fetch('APP_BUNDLE_ID')}",
      "CODE_SIGN_IDENTITY=Apple Distribution",
      "ONLY_ACTIVE_ARCH=NO",
      "ENABLE_USER_SCRIPT_SANDBOXING=NO"
    ].join(" ")

    gym(
      workspace: "App.xcworkspace",
      scheme: (ENV['SCHEME_NAME'] || "App"),
      configuration: "Release",
      clean: true,
      sdk: "iphoneos",
      export_method: "app-store",
      output_directory: "build",
      output_name: "App-#{Time.now.strftime('%Y%m%d')}.ipa",
      include_symbols: true,
      include_bitcode: false,
      result_bundle: true,
      xcargs: signing_args,
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          ENV.fetch('APP_BUNDLE_ID') => "match AppStore #{ENV.fetch('APP_BUNDLE_ID')}"
        }
      },
      silent: false
    )

    # 7) Safety check (προαιρετικό)
    sh <<~BASH
      set -e
      IPA=$(ls -t build/*.ipa | head -n1)
      TMP=$(mktemp -d); unzip -q "$IPA" -d "$TMP"
      APP_PATH=$(find "$TMP/Payload" -name "*.app" -maxdepth 1 | head -n1)
      /usr/bin/codesign -d --entitlements :- "$APP_PATH" > entitlements.plist
      /usr/libexec/PlistBuddy -c "Print :aps-environment" entitlements.plist || true
    BASH

    # 8) Upload στο TestFlight (χωρίς submit)
    pilot(
      api_key: api_key,
      skip_submission: true,
      skip_waiting_for_build_processing: true
    )
  end
end
